!function(t){function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}var e={};r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},r.p="",r(r.s=1)}([function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(){return g}function a(){return m}function o(){return p}function u(){return s(g,p)}function c(){return[].concat(n(p)).map(function(t){return s(g,new Set(t))}).concat([].concat(n(g)).map(function(t){return s(new Set(t),p)})).concat(function(){var t=[];return[["A","B","C"],["D","E","F"],["G","H","I"]].forEach(function(r){[["1","2","3"],["4","5","6"],["7","8","9"]].forEach(function(e){t.push(s(new Set(r),new Set(e)))})}),t}())}function f(t,r){var e=new Map;return[].concat(n(t)).forEach(function(t){return e.set(t,r.filter(function(r){return r.has(t)}))}),e}function l(t,r){var e=new Map;return[].concat(n(t)).forEach(function(t){var i=r.get(t);e.set(t,new Set([].concat(n(new Set([].concat(n(i[0]),n(i[1]),n(i[2]))))).filter(function(r){return r!==t})))}),e}function s(t,r){var e=new Set,n=!0,i=!1,a=void 0;try{for(var o,u=t.values()[Symbol.iterator]();!(n=(o=u.next()).done);n=!0){var c=o.value,f=!0,l=!1,s=void 0;try{for(var h,v=(r.values()||r)[Symbol.iterator]();!(f=(h=v.next()).done);f=!0){var y=h.value;e.add(c+y)}}catch(t){l=!0,s=t}finally{try{!f&&v.return&&v.return()}finally{if(l)throw s}}}}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}function h(t,r){var e=!0,n=!1,i=void 0;try{for(var a,o=t[Symbol.iterator]();!(e=(a=o.next()).done);e=!0){var u=a.value,c=r(u);if(c)return c}}catch(t){n=!0,i=t}finally{try{!e&&o.return&&o.return()}finally{if(n)throw i}}return!1}function v(t){for(var r=[].concat(n(t)),e=r.length,i=void 0,a=void 0;0!==e;)a=Math.floor(Math.random()*e),e-=1,i=r[e],r[e]=r[a],r[a]=i;return r}function y(t){var r=!0,e=!1,n=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){if(!i.value)return!1}}catch(t){e=!0,n=t}finally{try{!r&&a.return&&a.return()}finally{if(e)throw n}}return!0}function d(t,r){return Math.floor(Math.random()*(r-t+1))+t}Object.defineProperty(r,"__esModule",{value:!0}),r.getRows=i,r.getLowerCaseRows=a,r.getCols=o,r.getSquares=u,r.getUnitList=c,r.getUnits=f,r.getPeers=l,r.cross=s,r.some=h,r.shuffle=v,r.all=y,r.getRandomInt=d;var g=new Set(["A","B","C","D","E","F","G","H","I"]),p=new Set(["1","2","3","4","5","6","7","8","9"]),m=new Set(["a","b","c","d","e","f","g","h","i"])},function(t,r,e){"use strict";e(2);var n=e(3);new(function(t){return t&&t.__esModule?t:{default:t}}(n).default)},function(t,r){},function(t,r,e){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(r,"__esModule",{value:!0});var a=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=e(4),u=n(o),c=e(5),f=n(c),l=function t(){i(this,t),this.game=u.default.getGame(),this.puzzle=this.game.puzzle,this.solution=this.game.solution;var r=this.grid=new f.default;r.fillClues(this.puzzle);var e=this.grid.squares,n=!0,o=!1,c=void 0;try{for(var l,s=e[Symbol.iterator]();!(n=(l=s.next()).done);n=!0){var h=l.value,v=a(h,2),y=v[0],d=v[1];!function(t,e){e.onclick=function(){r.highlightSquare(e),r.highlightPeers(t)}}(y,d)}}catch(t){o=!0,c=t}finally{try{!n&&s.return&&s.return()}finally{if(o)throw c}}document.onkeydown=function(t){var e=t.key,n=t.keyCode;n>=49&&n<=57?r.setSquareValue(e):8===n&&r.setSquareValue("")}};r.default=l},function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(t){var r=new Map;w.forEach(function(t){return r.set(t,m)});var e=!0,n=!1,i=void 0;try{for(var u,c=a(t).entries()[Symbol.iterator]();!(e=(u=c.next()).done);e=!0){var f=u.value,l=d(f,2),s=l[0],h=l[1];if(m.has(h)&&!o(r,s,h))return!1}}catch(t){n=!0,i=t}finally{try{!e&&c.return&&c.return()}finally{if(n)throw i}}return r}function a(t){for(var r=t.filter(function(t){return m.has(t)||"0"===t||"."===t}),e=new Map,i=[].concat(n(w)),a=0;a<i.length;a++)e.set(i[a],r[a]);return e}function o(t,r,e){var i=[].concat(n(t.get(r))).filter(function(t){return t!==e});return!!(0,g.all)(i.map(function(e){return u(t,r,e)}))&&t}function u(t,r,e){if(!t.get(r).has(e))return t;if(t.set(r,new Set([].concat(n(t.get(r))).filter(function(t){return t!==e}))),!t.get(r).size)return!1;if(1===t.get(r).size){var i=[].concat(n(t.get(r)))[0];if(!(0,g.all)([].concat(n(x.get(r))).map(function(r){return u(t,r,i)})))return!1}var a=!0,c=!1,f=void 0;try{for(var l,s=S.get(r)[Symbol.iterator]();!(a=(l=s.next()).done);a=!0){var h=l.value,v=[].concat(n(h)).filter(function(r){return t.get(r).has(e)});if(!v.length)return!1;if(1===v.length&&!o(t,v[0],e))return!1}}catch(t){c=!0,f=t}finally{try{!a&&s.return&&s.return()}finally{if(c)throw f}}return t}function c(t){return f(i(t))}function f(t){if(!t)return!1;if((0,g.all)([].concat(n(w)).map(function(r){return 1===t.get(r).size})))return t;var r=[].concat(n(w)).filter(function(r){return t.get(r).size>1}).sort(function(r,e){return t.get(r).size-t.get(e).size})[0];return(0,g.some)(t.get(r),function(e){return f(o(new Map(t),r,e))})}function l(t){function r(r){var e=!0,i=!1,a=void 0;try{for(var o,u=r[Symbol.iterator]();!(e=(o=u.next()).done);e=!0){var c=o.value;if([].concat(n(t.get(c))).filter(function(t){return!m.has(t)}).length>0)return!1}}catch(t){i=!0,a=t}finally{try{!e&&u.return&&u.return()}finally{if(i)throw a}}return!0}return t&&(0,g.all)(b.map(function(t){return r(t)}))}function s(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:17,r=new Map;w.forEach(function(t){return r.set(t,m)});var e=!0,i=!1,a=void 0;try{for(var u,c=(0,g.shuffle)(w)[Symbol.iterator]();!(e=(u=c.next()).done);e=!0){var f=u.value;if(!o(r,f,h(r.get(f))))break;var l=[].concat(n(w)).filter(function(t){return 1===r.get(t).size}).map(function(t){return r.get(t)});if(l.length>=t&&new Set(l).size>=8)return[].concat(n(w)).map(function(t){return 1===r.get(t).size?[].concat(n(r.get(t)))[0]:"0"})}}catch(t){i=!0,a=t}finally{try{!e&&c.return&&c.return()}finally{if(i)throw a}}return s(t)}function h(t){return[].concat(n(t))[(0,g.getRandomInt)(0,t.size-1)]}function v(t,r){var e=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(e=(o=u.next()).done);e=!0){var c=o.value,f=d(c,2),l=f[0],s=f[1];if([].concat(n(r.get(l)))[0]!==[].concat(n(s))[0])return!1}}catch(t){i=!0,a=t}finally{try{!e&&u.return&&u.return()}finally{if(i)throw a}}return!0}function y(t){var r=[],e={},i=(0,g.shuffle)(w);[].concat(n(w)).forEach(function(i,a){r.push([].concat(n(t.get(i)))[0]),e[i]=a});for(var a=new Map,o=0;o<i.length;o++){var u=e[i[o]],f=r[u];r[u]="0",v(t,c(r))?a.set(i[o],"0"):(r[u]=f,a.set(i[o],f))}return a}Object.defineProperty(r,"__esModule",{value:!0});var d=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),g=e(0),p={easy:28,medium:37,hard:45,master:65},m=(0,g.getCols)(),w=(0,g.getSquares)(),b=(0,g.getUnitList)(),S=(0,g.getUnits)(w,b),x=(0,g.getPeers)(w,S);r.default={getGame:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:p.easy,r=c(s(81-t));!l(r);)r=c(s());return{puzzle:y(r),solution:r}}}},function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(r,"__esModule",{value:!0});var a=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(r,e,n){return e&&t(r.prototype,e),n&&t(r,n),r}}(),u=e(6),c=function(){function t(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"grid-container";i(this,t),this.grid=(0,u.build)(r),this.peers=this.grid.peers,this.squares=this.grid.squares}return o(t,[{key:"fillClues",value:function(t){var r=!0,e=!1,i=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done);r=!0){var c=o.value,f=a(c,2),l=f[0],s=f[1],h=[].concat(n(s))[0],v=this.squares.get(l.toLowerCase());"0"===h||"."===h?v.innerHTML="":(v.classList.add("clue"),v.innerHTML=h)}}catch(t){e=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(e)throw i}}}},{key:"setSquareValue",value:function(t){this.highlightedSquare&&(this.highlightedSquare.innerHTML=t)}},{key:"highlightSquare",value:function(t){t.classList.contains("clue")||(this.highlightedSquare&&(this.highlightedSquare.classList.remove("focused-content"),this.highlightedSquare.classList.remove("highlight")),this.highlightedSquare=t,this.highlightedSquare.classList.add("focused-content"))}},{key:"highlightPeers",value:function(t){this.highlightedPeers&&this.highlightedPeers.forEach(function(r){r.id!==t&&r.classList.remove("highlight")}),this.highlightedPeers=this.peers.get(t),this.highlightedPeers.forEach(function(t){return t.classList.add("highlight")})}}]),t}();r.default=c},function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"grid-container",r=[].concat(n((0,o.getLowerCaseRows)())),e=[].concat(n((0,o.getCols)())),i=document.getElementById(t),h=new Map,v=i.offsetWidth?i.offsetWidth/u-3:50,y=0;y<u;y++){for(var d=c(v),g=0;g<u;g++){var p=""+r[y]+e[g],m=f(v),w=l(p);m.appendChild(w),d.appendChild(m),h.set(p,w)}i.appendChild(d)}var b=(0,o.getSquares)(),S=(0,o.getUnitList)(),x=s((0,o.getPeers)(b,(0,o.getUnits)(b,S))),A=new Map,M=!0,q=!1,E=void 0;try{for(var z,C=x[Symbol.iterator]();!(M=(z=C.next()).done);M=!0){var L=z.value,P=a(L,2),_=P[0],O=P[1];A.set(_,[].concat(n(O)).map(function(t){return h.get(t)}))}}catch(t){q=!0,E=t}finally{try{!M&&C.return&&C.return()}finally{if(q)throw E}}return{peers:A,squares:h}}Object.defineProperty(r,"__esModule",{value:!0});var a=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();r.build=i;var o=e(0),u=9,c=function(t){var r=document.createElement("div");return r.setAttribute("class","row"),r.style.height=t+"px",r},f=function(t){var r=document.createElement("div");return r.setAttribute("class","col-1 square"),r.style.height=t+"px",r.style.width=t+"px",r.style.maxWidth=t+"px",r.style.flex="0 0 "+t+"px",r},l=function(t){var r=document.createElement("div");return r.id=t,r.setAttribute("class","square-content"),r},s=function(t){var r=new Map,e=!0,i=!1,o=void 0;try{for(var u,c=t[Symbol.iterator]();!(e=(u=c.next()).done);e=!0){var f=u.value,l=a(f,2),s=l[0],h=l[1];r.set(s.toLowerCase(),new Set([].concat(n(h)).map(function(t){return t.toLowerCase()})))}}catch(t){i=!0,o=t}finally{try{!e&&c.return&&c.return()}finally{if(i)throw o}}return r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbWFpbi5hMjBiMzBhZmUyODg3Yjk4ZTU3Yi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYTIwYjMwYWZlMjg4N2I5OGU1N2IiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3N1ZG9rdS1ncmlkLXV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3N1ZG9rdS11aS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc3Vkb2t1LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdWRva3UtZ2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdWRva3UtZ3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc3Vkb2t1LWdyaWQtYnVpbGRlci5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyMiIsImxlbmd0aCIsImZyb20iLCJnZXRSb3dzIiwicm93cyIsImdldExvd2VyQ2FzZVJvd3MiLCJsb3dlckNhc2VSb3dzIiwiZ2V0Q29scyIsImNvbHMiLCJnZXRTcXVhcmVzIiwiY3Jvc3MiLCJnZXRVbml0TGlzdCIsImNvbmNhdCIsIm1hcCIsIlNldCIsInIiLCJ1IiwiZm9yRWFjaCIsInB1c2giLCJnZXRVbml0cyIsInNxdWFyZXMiLCJ1bml0bGlzdCIsInVuaXRzIiwiTWFwIiwic2V0IiwiZmlsdGVyIiwiaGFzIiwiZ2V0UGVlcnMiLCJwZWVycyIsIngiLCJhIiwiYiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwidW5kZWZpbmVkIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJ2YWx1ZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwiYTEiLCJ2YWx1ZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsImIxIiwiYWRkIiwiZXJyIiwicmV0dXJuIiwic29tZSIsInNlcSIsImZ1bmMiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJyZXN1bHQiLCJzaHVmZmxlIiwiYXJyYXkiLCJjdXJyZW50SW5kZXgiLCJ0ZW1wb3JhcnlWYWx1ZSIsInJhbmRvbUluZGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiYWxsIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQiLCJfZGlkSXRlcmF0b3JFcnJvcjQiLCJfaXRlcmF0b3JFcnJvcjQiLCJfc3RlcDQiLCJfaXRlcmF0b3I0IiwiZ2V0UmFuZG9tSW50IiwibWluIiwibWF4IiwiX3N1ZG9rdSIsIm9iaiIsImRlZmF1bHQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9zbGljZWRUb0FycmF5Iiwic2xpY2VJdGVyYXRvciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiX3N1ZG9rdUdlbmVyYXRvciIsIl9zdWRva3VHZW5lcmF0b3IyIiwiX3N1ZG9rdUdyaWQiLCJfc3Vkb2t1R3JpZDIiLCJTdWRva3UiLCJ0aGlzIiwiZ2FtZSIsImdldEdhbWUiLCJwdXp6bGUiLCJzb2x1dGlvbiIsImdyaWQiLCJmaWxsQ2x1ZXMiLCJfcmVmIiwiX3JlZjIiLCJlbCIsIm9uY2xpY2siLCJoaWdobGlnaHRTcXVhcmUiLCJoaWdobGlnaHRQZWVycyIsImRvY3VtZW50Iiwib25rZXlkb3duIiwiZSIsImtleSIsImtleWNvZGUiLCJrZXlDb2RlIiwic2V0U3F1YXJlVmFsdWUiLCJwYXJzZUdyaWQiLCJkaWdpdHMiLCJncmlkVmFsdWVzIiwiZW50cmllcyIsImFzc2lnbiIsImNoYXJzIiwib3RoZXJzIiwiX3N1ZG9rdUdyaWRVdGlsIiwiZDIiLCJlbGltaW5hdGUiLCJzaXplIiwiczIiLCJ1bml0IiwiZHBsYWNlcyIsInNvbHZlIiwic2VhcmNoIiwic29ydCIsInMxIiwic29sdmVkIiwidW5pdFNvbHZlZCIsInJhbmRvbVB1enpsZSIsImFyZ3VtZW50cyIsInJhbmRvbVZhbHVlIiwiZHMiLCJpc1VuaXF1ZSIsIm9yaWdpbmFsIiwidGVzdCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241IiwiX2RpZEl0ZXJhdG9yRXJyb3I1IiwiX2l0ZXJhdG9yRXJyb3I1IiwiX3N0ZXA1IiwiX2l0ZXJhdG9yNSIsIl9yZWYzIiwiX3JlZjQiLCJjcmVhdGVQdXp6bGUiLCJpbmRpY2VzIiwic2h1ZmZsZWQiLCJqIiwidiIsImxldmVsIiwiZWFzeSIsIm1lZGl1bSIsImhhcmQiLCJtYXN0ZXIiLCJkaWZmaWN1bHR5IiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3N1ZG9rdUdyaWRCdWlsZGVyIiwiU3Vkb2t1R3JpZCIsImlkIiwiYnVpbGQiLCJjbHVlcyIsImNsdWUiLCJzcXVhcmUiLCJ0b0xvd2VyQ2FzZSIsImlubmVySFRNTCIsImNsYXNzTGlzdCIsImhpZ2hsaWdodGVkU3F1YXJlIiwiY29udGFpbnMiLCJyZW1vdmUiLCJoaWdobGlnaHRlZFBlZXJzIiwiZWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2VsbFNpemUiLCJvZmZzZXRXaWR0aCIsInJvdyIsImNyZWF0ZVJvdyIsImNyZWF0ZVNxdWFyZSIsImNvbnRlbnQiLCJjcmVhdGVTcXVhcmVDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJwZWVySWRzIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInN0eWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJtYXhXaWR0aCIsImZsZXgiLCJkMSJdLCJtYXBwaW5ncyI6IkNBQVMsU0FBVUEsR0NJbkIsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFFLE9BR0EsSUFBQUMsR0FBQUYsRUFBQUQsSUFDQUksRUFBQUosRUFDQUssR0FBQSxFQUNBSCxXQVVBLE9BTkFKLEdBQUFFLEdBQUFNLEtBQUFILEVBQUFELFFBQUFDLElBQUFELFFBQUFILEdBR0FJLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUF2QkEsR0FBQUQsS0E0QkFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsU0FBQVAsRUFBQVEsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVYsRUFBQVEsSUFDQUcsT0FBQUMsZUFBQVosRUFBQVEsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElBQUFOLEtBTUFaLEVBQUFtQixFQUFBLFNBQUFmLEdBQ0EsR0FBQVEsR0FBQVIsS0FBQWdCLFdBQ0EsV0FBMkIsTUFBQWhCLEdBQUEsU0FDM0IsV0FBaUMsTUFBQUEsR0FFakMsT0FEQUosR0FBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFRLEVBQUFDLEdBQXNELE1BQUFSLFFBQUFTLFVBQUFDLGVBQUFqQixLQUFBYyxFQUFBQyxJQUd0RHRCLEVBQUF5QixFQUFBLEdBR0F6QixJQUFBMEIsRUFBQSxLRE1NLFNBQVV0QixFQUFRRCxFQUFTSCxHQUVqQyxZQW1CQSxTQUFT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LFNBQWNkLEVBQTNCLEtBQ0FWLEVBQU9xQixNQUFNSSxLQUFiLE9BQTJCZixFQUEzQixLQUVPVixHQUdMZ0IsRUFBc0IsU0FBQ3BCLEdBQ3pCLEdBQUltQixHQUFVakYsU0FBU3FGLGNBQWMsTUFJckMsT0FIQUosR0FBUW5CLEdBQUtBLEVBQ2JtQixFQUFRSyxhQUFhLFFBekJGLGtCQTJCWkwsR0FHTGQsRUFBYyxTQUFDakssR0FDakIsR0FBSTBDLEdBQVMsR0FBSXZDLEtBRFlTLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxNQUFBQyxFQUFBLEtBRTdCLE9BQUFDLEdBQUFDLEVBQW1CakIsRUFBbkJtQixPQUFBQyxjQUFBUixHQUFBSSxFQUFBQyxFQUFBSSxRQUFBQyxNQUFBVixHQUFBLEVBQTRCLElBQUE0RSxHQUFBeEUsRUFBQVEsTUFBQWlFLEVBQUFyQixFQUFBb0IsRUFBQSxHQUFsQmpILEVBQWtCa0gsRUFBQSxHQUFmbEksRUFBZWtJLEVBQUEsRUFDMUIvQyxHQUFPdEMsSUFBSTdCLEVBQUUwTCxjQUFlLEdBQUl2SyxRQUFJRixPQUFBaEIsRUFBSWpCLElBQUdrQyxJQUFJLFNBQUFpTSxHQUFBLE1BQU1BLEdBQUd6QixtQkFIN0IsTUFBQWpJLEdBQUFuQixHQUFBLEVBQUFDLEVBQUFrQixFQUFBLGFBQUFwQixHQUFBSyxFQUFBZ0IsUUFBQWhCLEVBQUFnQixTQUFBLFdBQUFwQixFQUFBLEtBQUFDLElBTTdCLE1BQU80QiIsImZpbGUiOiJtYWluLmEyMGIzMGFmZTI4ODdiOThlNTdiLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRSb3dzID0gZ2V0Um93cztcbmV4cG9ydHMuZ2V0TG93ZXJDYXNlUm93cyA9IGdldExvd2VyQ2FzZVJvd3M7XG5leHBvcnRzLmdldENvbHMgPSBnZXRDb2xzO1xuZXhwb3J0cy5nZXRTcXVhcmVzID0gZ2V0U3F1YXJlcztcbmV4cG9ydHMuZ2V0VW5pdExpc3QgPSBnZXRVbml0TGlzdDtcbmV4cG9ydHMuZ2V0VW5pdHMgPSBnZXRVbml0cztcbmV4cG9ydHMuZ2V0UGVlcnMgPSBnZXRQZWVycztcbmV4cG9ydHMuY3Jvc3MgPSBjcm9zcztcbmV4cG9ydHMuc29tZSA9IHNvbWU7XG5leHBvcnRzLnNodWZmbGUgPSBzaHVmZmxlO1xuZXhwb3J0cy5hbGwgPSBhbGw7XG5leHBvcnRzLmdldFJhbmRvbUludCA9IGdldFJhbmRvbUludDtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciByb3dzID0gbmV3IFNldChbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJ10pO1xudmFyIGNvbHMgPSBuZXcgU2V0KFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknXSk7XG52YXIgbG93ZXJDYXNlUm93cyA9IG5ldyBTZXQoWydhJywgJ2InLCAnYycsICdkJywgJ2UnLCAnZicsICdnJywgJ2gnLCAnaSddKTtcblxuZnVuY3Rpb24gZ2V0Um93cygpIHtcbiAgcmV0dXJuIHJvd3M7XG59XG5cbmZ1bmN0aW9uIGdldExvd2VyQ2FzZVJvd3MoKSB7XG4gIHJldHVybiBsb3dlckNhc2VSb3dzO1xufVxuXG5mdW5jdGlvbiBnZXRDb2xzKCkge1xuICByZXR1cm4gY29scztcbn1cblxuZnVuY3Rpb24gZ2V0U3F1YXJlcygpIHtcbiAgcmV0dXJuIGNyb3NzKHJvd3MsIGNvbHMpO1xufVxuXG5mdW5jdGlvbiBnZXRVbml0TGlzdCgpIHtcbiAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY29scykpLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjcm9zcyhyb3dzLCBuZXcgU2V0KGMpKTtcbiAgfSkuY29uY2F0KFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocm93cykpLm1hcChmdW5jdGlvbiAocikge1xuICAgIHJldHVybiBjcm9zcyhuZXcgU2V0KHIpLCBjb2xzKTtcbiAgfSkpLmNvbmNhdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHUgPSBbXTtcbiAgICBbWydBJywgJ0InLCAnQyddLCBbJ0QnLCAnRScsICdGJ10sIFsnRycsICdIJywgJ0knXV0uZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddLCBbJzcnLCAnOCcsICc5J11dLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdS5wdXNoKGNyb3NzKG5ldyBTZXQociksIG5ldyBTZXQoYykpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHU7XG4gIH0oKSk7XG59XG5cbmZ1bmN0aW9uIGdldFVuaXRzKHNxdWFyZXMsIHVuaXRsaXN0KSB7XG4gIHZhciB1bml0cyA9IG5ldyBNYXAoKTtcbiAgW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzcXVhcmVzKSkuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiB1bml0cy5zZXQocywgdW5pdGxpc3QuZmlsdGVyKGZ1bmN0aW9uICh1KSB7XG4gICAgICByZXR1cm4gdS5oYXMocyk7XG4gICAgfSkpO1xuICB9KTtcblxuICByZXR1cm4gdW5pdHM7XG59XG5cbmZ1bmN0aW9uIGdldFBlZXJzKHNxdWFyZXMsIHVuaXRzKSB7XG4gIHZhciBwZWVycyA9IG5ldyBNYXAoKTtcblxuICBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNxdWFyZXMpKS5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG4gICAgdmFyIHAgPSB1bml0cy5nZXQocyk7XG4gICAgcGVlcnMuc2V0KHMsIG5ldyBTZXQoW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShuZXcgU2V0KFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocFswXSksIF90b0NvbnN1bWFibGVBcnJheShwWzFdKSwgX3RvQ29uc3VtYWJsZUFycmF5KHBbMl0pKSkpKS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4ICE9PSBzO1xuICAgIH0pKSk7XG4gIH0pO1xuXG4gIHJldHVybiBwZWVycztcbn1cblxuZnVuY3Rpb24gY3Jvc3MoYSwgYikge1xuICB2YXIgYyA9IG5ldyBTZXQoKTtcblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhLnZhbHVlcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIGExID0gX3N0ZXAudmFsdWU7XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IChiLnZhbHVlcygpIHx8IGIpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIGIxID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgYy5hZGQoYTEgKyBiMSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIHNvbWUoc2VxLCBmdW5jKSB7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBzZXFbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgIHZhciBkID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gZnVuYyhkKTtcbiAgICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogRmlzaGVyLVlhdGVzIFNodWZmbGVcbiAqIFNlZSBodHRwOi8vYml0Lmx5LzJnTVhpalhcbiAqL1xuZnVuY3Rpb24gc2h1ZmZsZShzZXEpIHtcbiAgdmFyIGFycmF5ID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzZXEpKTtcbiAgdmFyIGN1cnJlbnRJbmRleCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHRlbXBvcmFyeVZhbHVlID0gdm9pZCAwLFxuICAgICAgcmFuZG9tSW5kZXggPSB2b2lkIDA7XG5cbiAgLy8gV2hpbGUgdGhlcmUgcmVtYWluIGVsZW1lbnRzIHRvIHNodWZmbGUuLi5cbiAgd2hpbGUgKDAgIT09IGN1cnJlbnRJbmRleCkge1xuXG4gICAgLy8gUGljayBhIHJlbWFpbmluZyBlbGVtZW50Li4uXG4gICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50SW5kZXgpO1xuICAgIGN1cnJlbnRJbmRleCAtPSAxO1xuXG4gICAgLy8gQW5kIHN3YXAgaXQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50LlxuICAgIHRlbXBvcmFyeVZhbHVlID0gYXJyYXlbY3VycmVudEluZGV4XTtcbiAgICBhcnJheVtjdXJyZW50SW5kZXhdID0gYXJyYXlbcmFuZG9tSW5kZXhdO1xuICAgIGFycmF5W3JhbmRvbUluZGV4XSA9IHRlbXBvcmFyeVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBhbGwodmFsdWVzKSB7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yNCA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSB2YWx1ZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDQ7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSAoX3N0ZXA0ID0gX2l0ZXJhdG9yNC5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IHRydWUpIHtcbiAgICAgIHZhciB2ID0gX3N0ZXA0LnZhbHVlO1xuXG4gICAgICBpZiAoIXYpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yNCA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3I0ID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ICYmIF9pdGVyYXRvcjQucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvcjQucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3N1ZG9rdSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfc3Vkb2t1MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N1ZG9rdSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbm5ldyBfc3Vkb2t1Mi5kZWZhdWx0KCk7XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3N1ZG9rdUdlbmVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfc3Vkb2t1R2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N1ZG9rdUdlbmVyYXRvcik7XG5cbnZhciBfc3Vkb2t1R3JpZCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfc3Vkb2t1R3JpZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdWRva3VHcmlkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFN1ZG9rdSA9IGZ1bmN0aW9uIFN1ZG9rdSgpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1ZG9rdSk7XG5cbiAgdGhpcy5nYW1lID0gX3N1ZG9rdUdlbmVyYXRvcjIuZGVmYXVsdC5nZXRHYW1lKCk7XG4gIHRoaXMucHV6emxlID0gdGhpcy5nYW1lLnB1enpsZTtcbiAgdGhpcy5zb2x1dGlvbiA9IHRoaXMuZ2FtZS5zb2x1dGlvbjtcblxuICB2YXIgZ3JpZCA9IHRoaXMuZ3JpZCA9IG5ldyBfc3Vkb2t1R3JpZDIuZGVmYXVsdCgpO1xuICBncmlkLmZpbGxDbHVlcyh0aGlzLnB1enpsZSk7XG5cbiAgdmFyIHNxdWFyZXMgPSB0aGlzLmdyaWQuc3F1YXJlcztcblxuICAvLyBTZXR1cCB0b3VjaC9jbGljayBldmVudHMgZm9yIGVhY2ggc3F1YXJlLlxuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKHMsIGVsKSB7XG4gICAgZWwub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGdyaWQuaGlnaGxpZ2h0U3F1YXJlKGVsKTtcbiAgICAgIGdyaWQuaGlnaGxpZ2h0UGVlcnMocyk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBzcXVhcmVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIF9yZWYgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMik7XG5cbiAgICAgIHZhciBzID0gX3JlZjJbMF07XG4gICAgICB2YXIgZWwgPSBfcmVmMlsxXTtcblxuICAgICAgX2xvb3AocywgZWwpO1xuICAgIH1cblxuICAgIC8vIElucHV0IGV2ZW50XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZG9jdW1lbnQub25rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgdmFsdWUgPSBlLmtleTtcbiAgICB2YXIga2V5Y29kZSA9IGUua2V5Q29kZTtcblxuICAgIGlmIChrZXljb2RlID49IDQ5ICYmIGtleWNvZGUgPD0gNTcpIHtcbiAgICAgIGdyaWQuc2V0U3F1YXJlVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoa2V5Y29kZSA9PT0gOCkge1xuICAgICAgZ3JpZC5zZXRTcXVhcmVWYWx1ZSgnJyk7XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU3Vkb2t1O1xuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpOyAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQSBKYXZhU2NyaXB0IHBvcnQgYmFzZWQgb24gXCJTb2x2aW5nIEV2ZXJ5IFN1ZG9rdSBQdXp6bGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBieSBQZXRlciBOb3J2aWcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFRoZSBhcnRpY2xlIGNhbiBiZSBmb3VuZCBoZXJlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAtIGh0dHA6Ly9ub3J2aWcuY29tL3N1ZG9rdS5odG1sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFRoZSBvcmlnaW5hbCBQeXRob24gc291cmNlIGNhbiBiZSBmb3VuZCBoZXJlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAtIGh0dHBzOi8vZ2l0aHViLmNvbS9ub3J2aWcvcHl0dWRlcy9ibG9iL21hc3Rlci9zdWRva3UucHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbnZhciBfc3Vkb2t1R3JpZFV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIGxldmVsID0ge1xuICBlYXN5OiAyOCxcbiAgbWVkaXVtOiAzNyxcbiAgaGFyZDogNDUsXG4gIG1hc3RlcjogNjVcbn07XG5cbnZhciBkaWdpdHMgPSAoMCwgX3N1ZG9rdUdyaWRVdGlsLmdldENvbHMpKCk7XG52YXIgc3F1YXJlcyA9ICgwLCBfc3Vkb2t1R3JpZFV0aWwuZ2V0U3F1YXJlcykoKTtcbnZhciB1bml0bGlzdCA9ICgwLCBfc3Vkb2t1R3JpZFV0aWwuZ2V0VW5pdExpc3QpKCk7XG5cbnZhciB1bml0cyA9ICgwLCBfc3Vkb2t1R3JpZFV0aWwuZ2V0VW5pdHMpKHNxdWFyZXMsIHVuaXRsaXN0KTtcbnZhciBwZWVycyA9ICgwLCBfc3Vkb2t1R3JpZFV0aWwuZ2V0UGVlcnMpKHNxdWFyZXMsIHVuaXRzKTtcblxuLyoqXG4gKiBDb252ZXJ0IGdyaWQgdG8gYSBkaWN0IG9mIHBvc3NpYmxlIHZhbHVlcywge3NxdWFyZTogZGlnaXRzfSxcbiAqIG9yIHJldHVybiBmYWxzZSBpZiBhIGNvbnRyYWRpY3Rpb24gaXMgZGV0ZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlR3JpZChncmlkKSB7XG4gIHZhciB2YWx1ZXMgPSBuZXcgTWFwKCk7XG4gIHNxdWFyZXMuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiB2YWx1ZXMuc2V0KHMsIGRpZ2l0cyk7XG4gIH0pO1xuXG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGdyaWRWYWx1ZXMoZ3JpZCkuZW50cmllcygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIF9yZWYgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMik7XG5cbiAgICAgIHZhciBzID0gX3JlZjJbMF07XG4gICAgICB2YXIgZCA9IF9yZWYyWzFdO1xuXG4gICAgICBpZiAoZGlnaXRzLmhhcyhkKSAmJiAhYXNzaWduKHZhbHVlcywgcywgZCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZ3JpZCBpbnRvIGEgZGljdCBvZiB7c3F1YXJlOiBjaGFyfSB3aXRoICcwJyBvciAnLicgZm9yIGVtcHRpZXMuXG4gKi9cbmZ1bmN0aW9uIGdyaWRWYWx1ZXMoZ3JpZCkge1xuICB2YXIgY2hhcnMgPSBncmlkLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBkaWdpdHMuaGFzKGMpIHx8IGMgPT09ICcwJyB8fCBjID09PSAnLic7XG4gIH0pO1xuICB2YXIgdmFsdWVzID0gbmV3IE1hcCgpO1xuICB2YXIgcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3F1YXJlcykpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgIHZhbHVlcy5zZXQoc1tpXSwgY2hhcnNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuLyoqXG4gKiBFbGltaW5hdGUgYWxsIHRoZSBvdGhlciB2YWx1ZXMgKGV4Y2VwdCBkKSBmcm9tIHZhbHVlc1tzXSBhbmQgcHJvcGFnYXRlLlxuICogUmV0dXJuIHZhbHVlcywgZXhjZXB0IHJldHVybiBGYWxzZSBpZiBhIGNvbnRyYWRpY3Rpb24gaXMgZGV0ZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbih2YWx1ZXMsIHMsIGQpIHtcbiAgdmFyIG90aGVycyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzLmdldChzKSkpLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4ICE9PSBkO1xuICB9KTtcbiAgcmV0dXJuICgwLCBfc3Vkb2t1R3JpZFV0aWwuYWxsKShvdGhlcnMubWFwKGZ1bmN0aW9uIChkMikge1xuICAgIHJldHVybiBlbGltaW5hdGUodmFsdWVzLCBzLCBkMik7XG4gIH0pKSA/IHZhbHVlcyA6IGZhbHNlO1xufVxuXG4vKipcbiAqIEVsaW1pbmF0ZSBkIGZyb20gdmFsdWVzW3NdOyBwcm9wYWdhdGUgd2hlbiB2YWx1ZXMgb3IgcGxhY2VzIDw9IDIuXG4gKiBSZXR1cm4gdmFsdWVzLCBleGNlcHQgcmV0dXJuIEZhbHNlIGlmIGEgY29udHJhZGljdGlvbiBpcyBkZXRlY3RlZC5cbiAqL1xuZnVuY3Rpb24gZWxpbWluYXRlKHZhbHVlcywgcywgZCkge1xuICBpZiAoIXZhbHVlcy5nZXQocykuaGFzKGQpKSByZXR1cm4gdmFsdWVzO1xuXG4gIHZhbHVlcy5zZXQocywgbmV3IFNldChbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcy5nZXQocykpKS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geCAhPT0gZDtcbiAgfSkpKTtcblxuICBpZiAoIXZhbHVlcy5nZXQocykuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmICh2YWx1ZXMuZ2V0KHMpLnNpemUgPT09IDEpIHtcbiAgICB2YXIgZDIgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcy5nZXQocykpKVswXTtcblxuICAgIGlmICghKDAsIF9zdWRva3VHcmlkVXRpbC5hbGwpKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocGVlcnMuZ2V0KHMpKSkubWFwKGZ1bmN0aW9uIChzMikge1xuICAgICAgcmV0dXJuIGVsaW1pbmF0ZSh2YWx1ZXMsIHMyLCBkMik7XG4gICAgfSkpKSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gdW5pdHMuZ2V0KHMpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICB2YXIgdW5pdCA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgdmFyIGRwbGFjZXMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHVuaXQpKS5maWx0ZXIoZnVuY3Rpb24gKHMyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXMuZ2V0KHMyKS5oYXMoZCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFkcGxhY2VzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGRwbGFjZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmICghYXNzaWduKHZhbHVlcywgZHBsYWNlc1swXSwgZCkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIHNvbHZlKGdyaWQpIHtcbiAgcmV0dXJuIHNlYXJjaChwYXJzZUdyaWQoZ3JpZCkpO1xufVxuXG4vKipcbiAqIFVzaW5nIGRlcHRoLWZpcnN0IHNlYXJjaCBhbmQgcHJvcGFnYXRpb24sIHRyeSBhbGwgcG9zc2libGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZWFyY2godmFsdWVzKSB7XG4gIGlmICghdmFsdWVzKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCgwLCBfc3Vkb2t1R3JpZFV0aWwuYWxsKShbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNxdWFyZXMpKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdmFsdWVzLmdldChzKS5zaXplID09PSAxO1xuICB9KSkpIHJldHVybiB2YWx1ZXM7XG5cbiAgdmFyIHMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNxdWFyZXMpKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdmFsdWVzLmdldChzKS5zaXplID4gMTtcbiAgfSkuc29ydChmdW5jdGlvbiAoczEsIHMyKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5nZXQoczEpLnNpemUgLSB2YWx1ZXMuZ2V0KHMyKS5zaXplO1xuICB9KVswXTtcblxuICByZXR1cm4gKDAsIF9zdWRva3VHcmlkVXRpbC5zb21lKSh2YWx1ZXMuZ2V0KHMpLCBmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBzZWFyY2goYXNzaWduKG5ldyBNYXAodmFsdWVzKSwgcywgZCkpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBBIHB1enpsZSBpcyBzb2x2ZWQgaWYgZWFjaCB1bml0IGlzIGEgcGVybXV0YXRpb24gb2YgdGhlIGRpZ2l0cyAxIHRvIDkuXG4gKi9cbmZ1bmN0aW9uIHNvbHZlZCh2YWx1ZXMpIHtcbiAgZnVuY3Rpb24gdW5pdFNvbHZlZCh1bml0KSB7XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gdW5pdFtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICB2YXIgcyA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICB2YXIgZGlmZiA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVzLmdldChzKSkpLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiAhZGlnaXRzLmhhcyhkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkaWZmLmxlbmd0aCA+IDApIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzICYmICgwLCBfc3Vkb2t1R3JpZFV0aWwuYWxsKSh1bml0bGlzdC5tYXAoZnVuY3Rpb24gKHUpIHtcbiAgICByZXR1cm4gdW5pdFNvbHZlZCh1KTtcbiAgfSkpO1xufVxuXG4vKipcbiAqIE1ha2UgYSByYW5kb20gcHV6emxlIHdpdGggTiBvciBtb3JlIGFzc2lnbm1lbnRzLiBSZXN0YXJ0IG9uIGNvbnRyYWRpY3Rpb25zLlxuICogTm90ZSB0aGUgcmVzdWx0aW5nIHB1enpsZSBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBzb2x2YWJsZSwgYnV0IGVtcGlyaWNhbGx5XG4gKiBhYm91dCA5OS44JSBvZiB0aGVtIGFyZSBzb2x2YWJsZS4gU29tZSBoYXZlIG11bHRpcGxlIHNvbHV0aW9uc1xuICovXG5mdW5jdGlvbiByYW5kb21QdXp6bGUoKSB7XG4gIHZhciBuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAxNztcblxuICB2YXIgdmFsdWVzID0gbmV3IE1hcCgpO1xuICBzcXVhcmVzLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdmFsdWVzLnNldChzLCBkaWdpdHMpO1xuICB9KTtcblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3I0ID0gKDAsIF9zdWRva3VHcmlkVXRpbC5zaHVmZmxlKShzcXVhcmVzKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwNDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCA9IChfc3RlcDQgPSBfaXRlcmF0b3I0Lm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZSkge1xuICAgICAgdmFyIHMgPSBfc3RlcDQudmFsdWU7XG5cbiAgICAgIGlmICghYXNzaWduKHZhbHVlcywgcywgcmFuZG9tVmFsdWUodmFsdWVzLmdldChzKSkpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgZHMgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNxdWFyZXMpKS5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcy5nZXQocykuc2l6ZSA9PT0gMTtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gdmFsdWVzLmdldChzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZHMubGVuZ3RoID49IG4gJiYgbmV3IFNldChkcykuc2l6ZSA+PSA4KSB7XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNxdWFyZXMpKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWVzLmdldChzKS5zaXplID09PSAxID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZXMuZ2V0KHMpKSlbMF0gOiAnMCc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3I0ID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNC5yZXR1cm4pIHtcbiAgICAgICAgX2l0ZXJhdG9yNC5yZXR1cm4oKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yNCkge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJhbmRvbVB1enpsZShuKTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tVmFsdWUodmFsdWVzKSB7XG4gIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlcykpWygwLCBfc3Vkb2t1R3JpZFV0aWwuZ2V0UmFuZG9tSW50KSgwLCB2YWx1ZXMuc2l6ZSAtIDEpXTtcbn1cblxuZnVuY3Rpb24gaXNVbmlxdWUob3JpZ2luYWwsIHRlc3QpIHtcbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yNSA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3I1ID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IG9yaWdpbmFsW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA1OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb241ID0gKF9zdGVwNSA9IF9pdGVyYXRvcjUubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjUgPSB0cnVlKSB7XG4gICAgICB2YXIgX3JlZjMgPSBfc3RlcDUudmFsdWU7XG5cbiAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKTtcblxuICAgICAgdmFyIHMgPSBfcmVmNFswXTtcbiAgICAgIHZhciBkID0gX3JlZjRbMV07XG5cbiAgICAgIGlmIChbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRlc3QuZ2V0KHMpKSlbMF0gIT09IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZCkpWzBdKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvcjUgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yNSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNSAmJiBfaXRlcmF0b3I1LnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3I1LnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3I1KSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIHRocm91Z2ggdGhlIHJhbmRvbWx5IHNodWZmbGVkIHNxdWFyZXMuXG4gKiBBZnRlciByZW1vdmluZyBlYWNoIHNxdWFyZSBmcm9tIHRoZSBzb2x1dGlvblxuICogc29sdmUgaXQgYW5kIHRlc3QgaWYgaXQgaXMgdGhlIHNhbWUgYXMgdGhlIG9yaWdpbmFsLlxuICogSWYgdGhlIHNvbHV0aW9uIGRvZXNuJ3QgbWF0Y2ggdW5kbyB0aGUgcmVtb3ZhbCBhbmRcbiAqIHRyeSBhbm90aGVyIHNxdWFyZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUHV6emxlKHNvbHV0aW9uKSB7XG4gIHZhciBwdXp6bGUgPSBbXTtcbiAgdmFyIGluZGljZXMgPSB7fTtcbiAgdmFyIHNodWZmbGVkID0gKDAsIF9zdWRva3VHcmlkVXRpbC5zaHVmZmxlKShzcXVhcmVzKTtcblxuICBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHNxdWFyZXMpKS5mb3JFYWNoKGZ1bmN0aW9uIChzLCBpKSB7XG4gICAgcHV6emxlLnB1c2goW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzb2x1dGlvbi5nZXQocykpKVswXSk7XG4gICAgaW5kaWNlc1tzXSA9IGk7XG4gIH0pO1xuXG4gIHZhciByZXN1bHQgPSBuZXcgTWFwKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaHVmZmxlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBqID0gaW5kaWNlc1tzaHVmZmxlZFtpXV07XG4gICAgdmFyIHYgPSBwdXp6bGVbal07XG4gICAgcHV6emxlW2pdID0gJzAnO1xuXG4gICAgaWYgKCFpc1VuaXF1ZShzb2x1dGlvbiwgc29sdmUocHV6emxlKSkpIHtcbiAgICAgIHB1enpsZVtqXSA9IHY7XG4gICAgICByZXN1bHQuc2V0KHNodWZmbGVkW2ldLCB2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnNldChzaHVmZmxlZFtpXSwgJzAnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGdldEdhbWU6IGZ1bmN0aW9uIGdldEdhbWUoKSB7XG4gICAgdmFyIGRpZmZpY3VsdHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGxldmVsLmVhc3k7XG5cbiAgICB2YXIgc29sdXRpb24gPSBzb2x2ZShyYW5kb21QdXp6bGUoODEgLSBkaWZmaWN1bHR5KSk7XG5cbiAgICB3aGlsZSAoIXNvbHZlZChzb2x1dGlvbikpIHtcbiAgICAgIHNvbHV0aW9uID0gc29sdmUocmFuZG9tUHV6emxlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwdXp6bGU6IGNyZWF0ZVB1enpsZShzb2x1dGlvbiksXG4gICAgICBzb2x1dGlvbjogc29sdXRpb25cbiAgICB9O1xuICB9XG59O1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3N1ZG9rdUdyaWRCdWlsZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBTdWRva3VHcmlkID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWRva3VHcmlkKCkge1xuICAgIHZhciBpZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2dyaWQtY29udGFpbmVyJztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdWRva3VHcmlkKTtcblxuICAgIHRoaXMuZ3JpZCA9ICgwLCBfc3Vkb2t1R3JpZEJ1aWxkZXIuYnVpbGQpKGlkKTtcbiAgICB0aGlzLnBlZXJzID0gdGhpcy5ncmlkLnBlZXJzO1xuICAgIHRoaXMuc3F1YXJlcyA9IHRoaXMuZ3JpZC5zcXVhcmVzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN1ZG9rdUdyaWQsIFt7XG4gICAga2V5OiAnZmlsbENsdWVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbENsdWVzKGNsdWVzKSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gY2x1ZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIF9yZWYgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpO1xuXG4gICAgICAgICAgdmFyIHMgPSBfcmVmMlswXTtcbiAgICAgICAgICB2YXIgZCA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgdmFyIGNsdWUgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGQpKVswXTtcbiAgICAgICAgICB2YXIgc3F1YXJlID0gdGhpcy5zcXVhcmVzLmdldChzLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgICAgaWYgKGNsdWUgPT09ICcwJyB8fCBjbHVlID09PSAnLicpIHtcbiAgICAgICAgICAgIHNxdWFyZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2NsdWUnKTtcbiAgICAgICAgICAgIHNxdWFyZS5pbm5lckhUTUwgPSBjbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0U3F1YXJlVmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTcXVhcmVWYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaGlnaGxpZ2h0ZWRTcXVhcmUpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZFNxdWFyZS5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoaWdobGlnaHRTcXVhcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWdobGlnaHRTcXVhcmUoc3F1YXJlKSB7XG4gICAgICBpZiAoIXNxdWFyZS5jbGFzc0xpc3QuY29udGFpbnMoJ2NsdWUnKSkge1xuICAgICAgICBpZiAodGhpcy5oaWdobGlnaHRlZFNxdWFyZSkge1xuICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRTcXVhcmUuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXNlZC1jb250ZW50Jyk7XG4gICAgICAgICAgdGhpcy5oaWdobGlnaHRlZFNxdWFyZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRTcXVhcmUgPSBzcXVhcmU7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRTcXVhcmUuY2xhc3NMaXN0LmFkZCgnZm9jdXNlZC1jb250ZW50Jyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGlnaGxpZ2h0UGVlcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWdobGlnaHRQZWVycyhzcXVhcmUpIHtcbiAgICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkUGVlcnMpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRlZFBlZXJzLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICBpZiAocC5pZCAhPT0gc3F1YXJlKSBwLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5oaWdobGlnaHRlZFBlZXJzID0gdGhpcy5wZWVycy5nZXQoc3F1YXJlKTtcbiAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRQZWVycy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHJldHVybiBwLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN1ZG9rdUdyaWQ7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFN1ZG9rdUdyaWQ7XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmV4cG9ydHMuYnVpbGQgPSBidWlsZDtcblxudmFyIF9zdWRva3VHcmlkVXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG52YXIgbiA9IDk7XG52YXIgc3F1YXJlQ2xhc3MgPSAnY29sLTEgc3F1YXJlJztcbnZhciBjb250ZW50Q2xhc3MgPSAnc3F1YXJlLWNvbnRlbnQnO1xuXG52YXIgY3JlYXRlUm93ID0gZnVuY3Rpb24gY3JlYXRlUm93KGNlbGxTaXplKSB7XG4gIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcm93LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAncm93Jyk7XG4gIHJvdy5zdHlsZS5oZWlnaHQgPSBjZWxsU2l6ZSArICdweCc7XG5cbiAgcmV0dXJuIHJvdztcbn07XG5cbnZhciBjcmVhdGVTcXVhcmUgPSBmdW5jdGlvbiBjcmVhdGVTcXVhcmUoY2VsbFNpemUpIHtcbiAgdmFyIHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzcXVhcmUuc2V0QXR0cmlidXRlKCdjbGFzcycsIHNxdWFyZUNsYXNzKTtcblxuICBzcXVhcmUuc3R5bGUuaGVpZ2h0ID0gY2VsbFNpemUgKyAncHgnO1xuICBzcXVhcmUuc3R5bGUud2lkdGggPSBjZWxsU2l6ZSArICdweCc7XG4gIHNxdWFyZS5zdHlsZS5tYXhXaWR0aCA9IGNlbGxTaXplICsgJ3B4JztcbiAgc3F1YXJlLnN0eWxlLmZsZXggPSAnMCAwICcgKyBjZWxsU2l6ZSArICdweCc7XG5cbiAgcmV0dXJuIHNxdWFyZTtcbn07XG5cbnZhciBjcmVhdGVTcXVhcmVDb250ZW50ID0gZnVuY3Rpb24gY3JlYXRlU3F1YXJlQ29udGVudChpZCkge1xuICB2YXIgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb250ZW50LmlkID0gaWQ7XG4gIGNvbnRlbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNvbnRlbnRDbGFzcyk7XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59O1xuXG52YXIgdG9Mb3dlckNhc2UgPSBmdW5jdGlvbiB0b0xvd2VyQ2FzZShzcXVhcmVzKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgTWFwKCk7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHNxdWFyZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgX3JlZiA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKTtcblxuICAgICAgdmFyIHMgPSBfcmVmMlswXTtcbiAgICAgIHZhciBkID0gX3JlZjJbMV07XG5cbiAgICAgIHJlc3VsdC5zZXQocy50b0xvd2VyQ2FzZSgpLCBuZXcgU2V0KFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoZCkpLm1hcChmdW5jdGlvbiAoZDEpIHtcbiAgICAgICAgcmV0dXJuIGQxLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9KSkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZnVuY3Rpb24gYnVpbGQoKSB7XG4gIHZhciBpZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ2dyaWQtY29udGFpbmVyJztcblxuICB2YXIgcm93cyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoKDAsIF9zdWRva3VHcmlkVXRpbC5nZXRMb3dlckNhc2VSb3dzKSgpKSk7XG4gIHZhciBjb2xzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSgoMCwgX3N1ZG9rdUdyaWRVdGlsLmdldENvbHMpKCkpKTtcblxuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgdmFyIHNxdWFyZXMgPSBuZXcgTWFwKCk7XG4gIHZhciBjZWxsU2l6ZSA9IGVsZW1lbnQub2Zmc2V0V2lkdGggPyBlbGVtZW50Lm9mZnNldFdpZHRoIC8gbiAtIDMgOiA1MDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIHZhciByb3cgPSBjcmVhdGVSb3coY2VsbFNpemUpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgIHZhciBfaWQgPSAnJyArIHJvd3NbaV0gKyBjb2xzW2pdO1xuICAgICAgdmFyIHNxdWFyZSA9IGNyZWF0ZVNxdWFyZShjZWxsU2l6ZSk7XG4gICAgICB2YXIgY29udGVudCA9IGNyZWF0ZVNxdWFyZUNvbnRlbnQoX2lkKTtcblxuICAgICAgc3F1YXJlLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgICAgcm93LmFwcGVuZENoaWxkKHNxdWFyZSk7XG4gICAgICBzcXVhcmVzLnNldChfaWQsIGNvbnRlbnQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocm93KTtcbiAgfVxuXG4gIHZhciBzID0gKDAsIF9zdWRva3VHcmlkVXRpbC5nZXRTcXVhcmVzKSgpO1xuICB2YXIgdSA9ICgwLCBfc3Vkb2t1R3JpZFV0aWwuZ2V0VW5pdExpc3QpKCk7XG4gIHZhciBwZWVySWRzID0gdG9Mb3dlckNhc2UoKDAsIF9zdWRva3VHcmlkVXRpbC5nZXRQZWVycykocywgKDAsIF9zdWRva3VHcmlkVXRpbC5nZXRVbml0cykocywgdSkpKTtcbiAgdmFyIHBlZXJzID0gbmV3IE1hcCgpO1xuXG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBwZWVySWRzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICB2YXIgX3JlZjMgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKTtcblxuICAgICAgdmFyIF9zID0gX3JlZjRbMF07XG4gICAgICB2YXIgcCA9IF9yZWY0WzFdO1xuXG4gICAgICBwZWVycy5zZXQoX3MsIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocCkpLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gc3F1YXJlcy5nZXQoeCk7XG4gICAgICB9KSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBlZXJzOiBwZWVycyxcbiAgICBzcXVhcmVzOiBzcXVhcmVzXG4gIH07XG59XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbWFpbi5hMjBiMzBhZmUyODg3Yjk4ZTU3Yi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGEyMGIzMGFmZTI4ODdiOThlNTdiIiwiY29uc3Qgcm93cyA9IG5ldyBTZXQoWydBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSSddKTtcbmNvbnN0IGNvbHMgPSBuZXcgU2V0KFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknXSk7XG5jb25zdCBsb3dlckNhc2VSb3dzID0gbmV3IFNldChbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJywgJ2cnLCAnaCcsICdpJ10pO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um93cygpIHtcbiAgcmV0dXJuIHJvd3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb3dlckNhc2VSb3dzKCkge1xuICByZXR1cm4gbG93ZXJDYXNlUm93cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHMoKSB7XG4gIHJldHVybiBjb2xzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcXVhcmVzKCkge1xuICByZXR1cm4gY3Jvc3Mocm93cywgY29scyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbml0TGlzdCgpIHtcbiAgcmV0dXJuIFsuLi5jb2xzXS5tYXAoYyA9PiBjcm9zcyhyb3dzLCBuZXcgU2V0KGMpKSlcbiAgICAgIC5jb25jYXQoWy4uLnJvd3NdLm1hcChyID0+IGNyb3NzKG5ldyBTZXQociksIGNvbHMpKSlcbiAgICAgIC5jb25jYXQoKCgpID0+IHtcbiAgICAgICAgbGV0IHUgPSBbXTtcbiAgICAgICAgW1snQScsICdCJywgJ0MnXSwgWydEJywgJ0UnLCAnRiddLCBbJ0cnLCAnSCcsICdJJ11dLmZvckVhY2gociA9PiB7XG4gICAgICAgICAgW1snMScsICcyJywgJzMnXSwgWyc0JywgJzUnLCAnNiddLCBbJzcnLCAnOCcsICc5J11dLmZvckVhY2goYyA9PiB7XG4gICAgICAgICAgICB1LnB1c2goY3Jvc3MobmV3IFNldChyKSwgbmV3IFNldChjKSkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHU7XG4gICAgICB9KSgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXRzKHNxdWFyZXMsIHVuaXRsaXN0KSB7XG4gIGxldCB1bml0cyA9IG5ldyBNYXAoKTtcbiAgWy4uLnNxdWFyZXNdLmZvckVhY2gocyA9PiB1bml0cy5zZXQocywgdW5pdGxpc3QuZmlsdGVyKHUgPT4gdS5oYXMocykpKSk7XG5cbiAgcmV0dXJuIHVuaXRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGVlcnMoc3F1YXJlcywgdW5pdHMpIHtcbiAgbGV0IHBlZXJzID0gbmV3IE1hcCgpO1xuXG4gIFsuLi5zcXVhcmVzXS5mb3JFYWNoKHMgPT4ge1xuICAgIGxldCBwID0gdW5pdHMuZ2V0KHMpO1xuICAgIHBlZXJzLnNldChzLCBuZXcgU2V0KFxuICAgICAgICBbLi4ubmV3IFNldChbLi4ucFswXSwgLi4ucFsxXSwgLi4ucFsyXV0pXS5maWx0ZXIoeCA9PiB4ICE9PSBzKSkpO1xuICB9KTtcblxuICByZXR1cm4gcGVlcnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhhLCBiKSB7XG4gIGxldCBjID0gbmV3IFNldCgpO1xuXG4gIGZvciAobGV0IGExIG9mIGEudmFsdWVzKCkpIHtcbiAgICBmb3IgKGxldCBiMSBvZiBiLnZhbHVlcygpIHx8IGIpIHtcbiAgICAgIGMuYWRkKGExICsgYjEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29tZShzZXEsIGZ1bmMpIHtcbiAgZm9yIChsZXQgZCBvZiBzZXEpIHtcbiAgICBsZXQgcmVzdWx0ID0gZnVuYyhkKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEZpc2hlci1ZYXRlcyBTaHVmZmxlXG4gKiBTZWUgaHR0cDovL2JpdC5seS8yZ01YaWpYXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKHNlcSkge1xuICBsZXQgYXJyYXkgPSBbLi4uc2VxXTtcbiAgbGV0IGN1cnJlbnRJbmRleCA9IGFycmF5Lmxlbmd0aCwgdGVtcG9yYXJ5VmFsdWUsIHJhbmRvbUluZGV4O1xuXG4gIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxlLi4uXG4gIHdoaWxlICgwICE9PSBjdXJyZW50SW5kZXgpIHtcblxuICAgIC8vIFBpY2sgYSByZW1haW5pbmcgZWxlbWVudC4uLlxuICAgIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY3VycmVudEluZGV4KTtcbiAgICBjdXJyZW50SW5kZXggLT0gMTtcblxuICAgIC8vIEFuZCBzd2FwIGl0IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudC5cbiAgICB0ZW1wb3JhcnlWYWx1ZSA9IGFycmF5W2N1cnJlbnRJbmRleF07XG4gICAgYXJyYXlbY3VycmVudEluZGV4XSA9IGFycmF5W3JhbmRvbUluZGV4XTtcbiAgICBhcnJheVtyYW5kb21JbmRleF0gPSB0ZW1wb3JhcnlWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbCh2YWx1ZXMpIHtcbiAgZm9yIChsZXQgdiBvZiB2YWx1ZXMpXG4gICAgaWYgKCF2KSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N1ZG9rdS1ncmlkLXV0aWwuanMiLCJpbXBvcnQgJy4uL2Nzcy9tYWluLmNzcyc7XG5pbXBvcnQgU3Vkb2t1IGZyb20gXCIuL3N1ZG9rdVwiO1xuXG5uZXcgU3Vkb2t1KCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N1ZG9rdS11aS5qcyIsImltcG9ydCBnZW5lcmF0b3IgZnJvbSAnLi9zdWRva3UtZ2VuZXJhdG9yJztcbmltcG9ydCBTdWRva3VHcmlkIGZyb20gJy4vc3Vkb2t1LWdyaWQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdWRva3Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmdhbWUgPSBnZW5lcmF0b3IuZ2V0R2FtZSgpO1xuICAgIHRoaXMucHV6emxlID0gdGhpcy5nYW1lLnB1enpsZTtcbiAgICB0aGlzLnNvbHV0aW9uID0gdGhpcy5nYW1lLnNvbHV0aW9uO1xuXG4gICAgbGV0IGdyaWQgPSB0aGlzLmdyaWQgPSBuZXcgU3Vkb2t1R3JpZCgpO1xuICAgIGdyaWQuZmlsbENsdWVzKHRoaXMucHV6emxlKTtcblxuICAgIGxldCBzcXVhcmVzID0gdGhpcy5ncmlkLnNxdWFyZXM7XG5cbiAgICAvLyBTZXR1cCB0b3VjaC9jbGljayBldmVudHMgZm9yIGVhY2ggc3F1YXJlLlxuICAgIGZvciAobGV0IFtzLCBlbF0gb2Ygc3F1YXJlcykge1xuICAgICAgZWwub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgZ3JpZC5oaWdobGlnaHRTcXVhcmUoZWwpO1xuICAgICAgICBncmlkLmhpZ2hsaWdodFBlZXJzKHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElucHV0IGV2ZW50XG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gKGUpID0+IHtcbiAgICAgIGxldCB2YWx1ZSA9IGUua2V5O1xuICAgICAgbGV0IGtleWNvZGUgPSBlLmtleUNvZGU7XG5cbiAgICAgIGlmIChrZXljb2RlID49IDQ5ICYmIGtleWNvZGUgPD0gNTcpIHtcbiAgICAgICAgZ3JpZC5zZXRTcXVhcmVWYWx1ZSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGtleWNvZGUgPT09IDgpIHtcbiAgICAgICAgZ3JpZC5zZXRTcXVhcmVWYWx1ZSgnJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N1ZG9rdS5qcyIsIi8qKlxuICogQSBKYXZhU2NyaXB0IHBvcnQgYmFzZWQgb24gXCJTb2x2aW5nIEV2ZXJ5IFN1ZG9rdSBQdXp6bGVcIlxuICogYnkgUGV0ZXIgTm9ydmlnLlxuICpcbiAqIFRoZSBhcnRpY2xlIGNhbiBiZSBmb3VuZCBoZXJlOlxuICogLSBodHRwOi8vbm9ydmlnLmNvbS9zdWRva3UuaHRtbFxuICpcbiAqIFRoZSBvcmlnaW5hbCBQeXRob24gc291cmNlIGNhbiBiZSBmb3VuZCBoZXJlOlxuICogLSBodHRwczovL2dpdGh1Yi5jb20vbm9ydmlnL3B5dHVkZXMvYmxvYi9tYXN0ZXIvc3Vkb2t1LnB5XG4gKi9cblxuaW1wb3J0IHtcbiAgZ2V0Q29scyxcbiAgZ2V0U3F1YXJlcyxcbiAgZ2V0VW5pdExpc3QsXG4gIGdldFVuaXRzLFxuICBnZXRQZWVycyxcbiAgc29tZSxcbiAgc2h1ZmZsZSxcbiAgYWxsLFxuICBnZXRSYW5kb21JbnRcbn0gZnJvbSAnLi9zdWRva3UtZ3JpZC11dGlsJztcblxuY29uc3QgbGV2ZWwgPSB7XG4gIGVhc3k6IDI4LFxuICBtZWRpdW06IDM3LFxuICBoYXJkOiA0NSxcbiAgbWFzdGVyOiA2NVxufTtcblxuY29uc3QgZGlnaXRzID0gZ2V0Q29scygpO1xuY29uc3Qgc3F1YXJlcyA9IGdldFNxdWFyZXMoKTtcbmNvbnN0IHVuaXRsaXN0ID0gZ2V0VW5pdExpc3QoKTtcblxubGV0IHVuaXRzID0gZ2V0VW5pdHMoc3F1YXJlcywgdW5pdGxpc3QpO1xubGV0IHBlZXJzID0gZ2V0UGVlcnMoc3F1YXJlcywgdW5pdHMpO1xuXG4vKipcbiAqIENvbnZlcnQgZ3JpZCB0byBhIGRpY3Qgb2YgcG9zc2libGUgdmFsdWVzLCB7c3F1YXJlOiBkaWdpdHN9LFxuICogb3IgcmV0dXJuIGZhbHNlIGlmIGEgY29udHJhZGljdGlvbiBpcyBkZXRlY3RlZC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VHcmlkKGdyaWQpIHtcbiAgbGV0IHZhbHVlcyA9IG5ldyBNYXAoKTtcbiAgc3F1YXJlcy5mb3JFYWNoKHMgPT4gdmFsdWVzLnNldChzLCBkaWdpdHMpKTtcblxuICBmb3IgKGxldCBbcywgZF0gb2YgZ3JpZFZhbHVlcyhncmlkKS5lbnRyaWVzKCkpIHtcbiAgICBpZiAoZGlnaXRzLmhhcyhkKSAmJiAhYXNzaWduKHZhbHVlcywgcywgZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZ3JpZCBpbnRvIGEgZGljdCBvZiB7c3F1YXJlOiBjaGFyfSB3aXRoICcwJyBvciAnLicgZm9yIGVtcHRpZXMuXG4gKi9cbmZ1bmN0aW9uIGdyaWRWYWx1ZXMoZ3JpZCkge1xuICBsZXQgY2hhcnMgPSBncmlkLmZpbHRlcihjID0+IGRpZ2l0cy5oYXMoYykgfHwgYyA9PT0gJzAnIHx8IGMgPT09ICcuJyk7XG4gIGxldCB2YWx1ZXMgPSBuZXcgTWFwKCk7XG4gIGxldCBzID0gWy4uLnNxdWFyZXNdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgIHZhbHVlcy5zZXQoc1tpXSwgY2hhcnNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuLyoqXG4gKiBFbGltaW5hdGUgYWxsIHRoZSBvdGhlciB2YWx1ZXMgKGV4Y2VwdCBkKSBmcm9tIHZhbHVlc1tzXSBhbmQgcHJvcGFnYXRlLlxuICogUmV0dXJuIHZhbHVlcywgZXhjZXB0IHJldHVybiBGYWxzZSBpZiBhIGNvbnRyYWRpY3Rpb24gaXMgZGV0ZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbih2YWx1ZXMsIHMsIGQpIHtcbiAgbGV0IG90aGVycyA9IFsuLi52YWx1ZXMuZ2V0KHMpXS5maWx0ZXIoeCA9PiB4ICE9PSBkKTtcbiAgcmV0dXJuIGFsbChvdGhlcnMubWFwKGQyID0+IGVsaW1pbmF0ZSh2YWx1ZXMsIHMsIGQyKSkpID8gdmFsdWVzIDogZmFsc2U7XG59XG5cbi8qKlxuICogRWxpbWluYXRlIGQgZnJvbSB2YWx1ZXNbc107IHByb3BhZ2F0ZSB3aGVuIHZhbHVlcyBvciBwbGFjZXMgPD0gMi5cbiAqIFJldHVybiB2YWx1ZXMsIGV4Y2VwdCByZXR1cm4gRmFsc2UgaWYgYSBjb250cmFkaWN0aW9uIGlzIGRldGVjdGVkLlxuICovXG5mdW5jdGlvbiBlbGltaW5hdGUodmFsdWVzLCBzLCBkKSB7XG4gIGlmICghdmFsdWVzLmdldChzKS5oYXMoZCkpXG4gICAgcmV0dXJuIHZhbHVlcztcblxuICB2YWx1ZXMuc2V0KHMsIG5ldyBTZXQoWy4uLnZhbHVlcy5nZXQocyldLmZpbHRlcih4ID0+IHggIT09IGQpKSk7XG5cbiAgaWYgKCF2YWx1ZXMuZ2V0KHMpLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgfSBlbHNlIGlmICh2YWx1ZXMuZ2V0KHMpLnNpemUgPT09IDEpIHtcbiAgICBsZXQgZDIgPSBbLi4udmFsdWVzLmdldChzKV1bMF07XG5cbiAgICBpZiAoIWFsbChbLi4ucGVlcnMuZ2V0KHMpXS5tYXAoczIgPT4gZWxpbWluYXRlKHZhbHVlcywgczIsIGQyKSkpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChsZXQgdW5pdCBvZiB1bml0cy5nZXQocykpIHtcbiAgICBsZXQgZHBsYWNlcyA9IFsuLi51bml0XS5maWx0ZXIoczIgPT4gdmFsdWVzLmdldChzMikuaGFzKGQpKTtcblxuICAgIGlmICghZHBsYWNlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGRwbGFjZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAoIWFzc2lnbih2YWx1ZXMsIGRwbGFjZXNbMF0sIGQpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gc29sdmUoZ3JpZCkge1xuICByZXR1cm4gc2VhcmNoKHBhcnNlR3JpZChncmlkKSk7XG59XG5cbi8qKlxuICogVXNpbmcgZGVwdGgtZmlyc3Qgc2VhcmNoIGFuZCBwcm9wYWdhdGlvbiwgdHJ5IGFsbCBwb3NzaWJsZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNlYXJjaCh2YWx1ZXMpIHtcbiAgaWYgKCF2YWx1ZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhbGwoWy4uLnNxdWFyZXNdLm1hcChzID0+IHZhbHVlcy5nZXQocykuc2l6ZSA9PT0gMSkpKVxuICAgIHJldHVybiB2YWx1ZXM7XG5cbiAgbGV0IHMgPSBbLi4uc3F1YXJlc11cbiAgICAgIC5maWx0ZXIocyA9PiB2YWx1ZXMuZ2V0KHMpLnNpemUgPiAxKVxuICAgICAgLnNvcnQoKHMxLCBzMikgPT4gdmFsdWVzLmdldChzMSkuc2l6ZSAtIHZhbHVlcy5nZXQoczIpLnNpemUpWzBdO1xuXG4gIHJldHVybiBzb21lKHZhbHVlcy5nZXQocyksIGQgPT4gc2VhcmNoKGFzc2lnbihuZXcgTWFwKHZhbHVlcyksIHMsIGQpKSk7XG59XG5cbi8qKlxuICogQSBwdXp6bGUgaXMgc29sdmVkIGlmIGVhY2ggdW5pdCBpcyBhIHBlcm11dGF0aW9uIG9mIHRoZSBkaWdpdHMgMSB0byA5LlxuICovXG5mdW5jdGlvbiBzb2x2ZWQodmFsdWVzKSB7XG4gIGZ1bmN0aW9uIHVuaXRTb2x2ZWQodW5pdCkge1xuICAgIGZvciAobGV0IHMgb2YgdW5pdCkge1xuICAgICAgbGV0IGRpZmYgPSBbLi4udmFsdWVzLmdldChzKV0uZmlsdGVyKGQgPT4gIWRpZ2l0cy5oYXMoZCkpO1xuICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlcyAmJiBhbGwodW5pdGxpc3QubWFwKHUgPT4gdW5pdFNvbHZlZCh1KSkpO1xufVxuXG4vKipcbiAqIE1ha2UgYSByYW5kb20gcHV6emxlIHdpdGggTiBvciBtb3JlIGFzc2lnbm1lbnRzLiBSZXN0YXJ0IG9uIGNvbnRyYWRpY3Rpb25zLlxuICogTm90ZSB0aGUgcmVzdWx0aW5nIHB1enpsZSBpcyBub3QgZ3VhcmFudGVlZCB0byBiZSBzb2x2YWJsZSwgYnV0IGVtcGlyaWNhbGx5XG4gKiBhYm91dCA5OS44JSBvZiB0aGVtIGFyZSBzb2x2YWJsZS4gU29tZSBoYXZlIG11bHRpcGxlIHNvbHV0aW9uc1xuICovXG5mdW5jdGlvbiByYW5kb21QdXp6bGUobiA9IDE3KSB7XG4gIGxldCB2YWx1ZXMgPSBuZXcgTWFwKCk7XG4gIHNxdWFyZXMuZm9yRWFjaChzID0+IHZhbHVlcy5zZXQocywgZGlnaXRzKSk7XG5cbiAgZm9yIChsZXQgcyBvZiBzaHVmZmxlKHNxdWFyZXMpKSB7XG4gICAgaWYgKCFhc3NpZ24odmFsdWVzLCBzLCByYW5kb21WYWx1ZSh2YWx1ZXMuZ2V0KHMpKSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxldCBkcyA9IFsuLi5zcXVhcmVzXVxuICAgICAgICAuZmlsdGVyKHMgPT4gdmFsdWVzLmdldChzKS5zaXplID09PSAxKVxuICAgICAgICAubWFwKHMgPT4gdmFsdWVzLmdldChzKSk7XG5cbiAgICBpZiAoZHMubGVuZ3RoID49IG4gJiYgbmV3IFNldChkcykuc2l6ZSA+PSA4KSB7XG4gICAgICByZXR1cm4gWy4uLnNxdWFyZXNdXG4gICAgICAgICAgLm1hcChzID0+IHZhbHVlcy5nZXQocykuc2l6ZSA9PT0gMSA/IFsuLi52YWx1ZXMuZ2V0KHMpXVswXSA6ICcwJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJhbmRvbVB1enpsZShuKTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tVmFsdWUodmFsdWVzKSB7XG4gIHJldHVybiBbLi4udmFsdWVzXVtnZXRSYW5kb21JbnQoMCwgdmFsdWVzLnNpemUgLSAxKV07XG59XG5cbmZ1bmN0aW9uIGlzVW5pcXVlKG9yaWdpbmFsLCB0ZXN0KSB7XG4gIGZvciAobGV0IFtzLCBkXSBvZiBvcmlnaW5hbCkge1xuICAgIGlmIChbLi4udGVzdC5nZXQocyldWzBdICE9PSBbLi4uZF1bMF0pIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgdGhyb3VnaCB0aGUgcmFuZG9tbHkgc2h1ZmZsZWQgc3F1YXJlcy5cbiAqIEFmdGVyIHJlbW92aW5nIGVhY2ggc3F1YXJlIGZyb20gdGhlIHNvbHV0aW9uXG4gKiBzb2x2ZSBpdCBhbmQgdGVzdCBpZiBpdCBpcyB0aGUgc2FtZSBhcyB0aGUgb3JpZ2luYWwuXG4gKiBJZiB0aGUgc29sdXRpb24gZG9lc24ndCBtYXRjaCB1bmRvIHRoZSByZW1vdmFsIGFuZFxuICogdHJ5IGFub3RoZXIgc3F1YXJlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQdXp6bGUoc29sdXRpb24pIHtcbiAgbGV0IHB1enpsZSA9IFtdO1xuICBsZXQgaW5kaWNlcyA9IHt9O1xuICBsZXQgc2h1ZmZsZWQgPSBzaHVmZmxlKHNxdWFyZXMpO1xuXG4gIFsuLi5zcXVhcmVzXS5mb3JFYWNoKChzLCBpKSA9PiB7XG4gICAgcHV6emxlLnB1c2goWy4uLnNvbHV0aW9uLmdldChzKV1bMF0pO1xuICAgIGluZGljZXNbc10gPSBpO1xuICB9KTtcblxuICBsZXQgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2h1ZmZsZWQubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaiA9IGluZGljZXNbc2h1ZmZsZWRbaV1dO1xuICAgIGxldCB2ID0gcHV6emxlW2pdO1xuICAgIHB1enpsZVtqXSA9ICcwJztcblxuICAgIGlmICghaXNVbmlxdWUoc29sdXRpb24sIHNvbHZlKHB1enpsZSkpKSB7XG4gICAgICBwdXp6bGVbal0gPSB2O1xuICAgICAgcmVzdWx0LnNldChzaHVmZmxlZFtpXSwgdik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5zZXQoc2h1ZmZsZWRbaV0sICcwJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRHYW1lOiAoZGlmZmljdWx0eSA9IGxldmVsLmVhc3kpID0+IHtcbiAgICBsZXQgc29sdXRpb24gPSBzb2x2ZShyYW5kb21QdXp6bGUoODEgLSBkaWZmaWN1bHR5KSk7XG5cbiAgICB3aGlsZSAoIXNvbHZlZChzb2x1dGlvbikpIHtcbiAgICAgIHNvbHV0aW9uID0gc29sdmUocmFuZG9tUHV6emxlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwdXp6bGU6IGNyZWF0ZVB1enpsZShzb2x1dGlvbiksXG4gICAgICBzb2x1dGlvbjogc29sdXRpb25cbiAgICB9O1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvc3Vkb2t1LWdlbmVyYXRvci5qcyIsImltcG9ydCB7YnVpbGR9IGZyb20gJy4vc3Vkb2t1LWdyaWQtYnVpbGRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1ZG9rdUdyaWQge1xuICBjb25zdHJ1Y3RvcihpZD0nZ3JpZC1jb250YWluZXInKSB7XG4gICAgdGhpcy5ncmlkID0gYnVpbGQoaWQpO1xuICAgIHRoaXMucGVlcnMgPSB0aGlzLmdyaWQucGVlcnM7XG4gICAgdGhpcy5zcXVhcmVzID0gdGhpcy5ncmlkLnNxdWFyZXM7XG4gIH1cblxuICBmaWxsQ2x1ZXMoY2x1ZXMpIHtcbiAgICBmb3IgKGxldCBbcywgZF0gb2YgY2x1ZXMpIHtcbiAgICAgIGxldCBjbHVlID0gWy4uLmRdWzBdO1xuICAgICAgbGV0IHNxdWFyZSA9IHRoaXMuc3F1YXJlcy5nZXQocy50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgaWYgKGNsdWUgPT09ICcwJyB8fCBjbHVlID09PSAnLicpIHtcbiAgICAgICAgc3F1YXJlLmlubmVySFRNTCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2NsdWUnKTtcbiAgICAgICAgc3F1YXJlLmlubmVySFRNTCA9IGNsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0U3F1YXJlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodGhpcy5oaWdobGlnaHRlZFNxdWFyZSkge1xuICAgICAgdGhpcy5oaWdobGlnaHRlZFNxdWFyZS5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBoaWdobGlnaHRTcXVhcmUoc3F1YXJlKSB7XG4gICAgaWYgKCFzcXVhcmUuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbHVlJykpIHtcbiAgICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkU3F1YXJlKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRTcXVhcmUuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXNlZC1jb250ZW50Jyk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRTcXVhcmUuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRTcXVhcmUgPSBzcXVhcmU7XG4gICAgICB0aGlzLmhpZ2hsaWdodGVkU3F1YXJlLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzZWQtY29udGVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGhpZ2hsaWdodFBlZXJzKHNxdWFyZSkge1xuICAgIGlmICh0aGlzLmhpZ2hsaWdodGVkUGVlcnMpIHtcbiAgICAgIHRoaXMuaGlnaGxpZ2h0ZWRQZWVycy5mb3JFYWNoKHAgPT4ge1xuICAgICAgICBpZiAocC5pZCAhPT0gc3F1YXJlKSBwLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5oaWdobGlnaHRlZFBlZXJzID0gdGhpcy5wZWVycy5nZXQoc3F1YXJlKTtcbiAgICB0aGlzLmhpZ2hsaWdodGVkUGVlcnMuZm9yRWFjaChwID0+IHAuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0JykpO1xuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N1ZG9rdS1ncmlkLmpzIiwiaW1wb3J0IHtcbiAgZ2V0TG93ZXJDYXNlUm93cyxcbiAgZ2V0Q29scyxcbiAgZ2V0U3F1YXJlcyxcbiAgZ2V0UGVlcnMsIGdldFVuaXRzLCBnZXRVbml0TGlzdFxufSBmcm9tIFwiLi9zdWRva3UtZ3JpZC11dGlsXCI7XG5cbmNvbnN0IG4gPSA5O1xuY29uc3Qgc3F1YXJlQ2xhc3MgPSAnY29sLTEgc3F1YXJlJztcbmNvbnN0IGNvbnRlbnRDbGFzcyA9ICdzcXVhcmUtY29udGVudCc7XG5cbmxldCBjcmVhdGVSb3cgPSAoY2VsbFNpemUpID0+IHtcbiAgbGV0IHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICByb3cuc2V0QXR0cmlidXRlKCdjbGFzcycsICdyb3cnKTtcbiAgcm93LnN0eWxlLmhlaWdodCA9IGAke2NlbGxTaXplfXB4YDtcblxuICByZXR1cm4gcm93O1xufTtcblxubGV0IGNyZWF0ZVNxdWFyZSA9IChjZWxsU2l6ZSkgPT4ge1xuICBsZXQgc3F1YXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNxdWFyZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgc3F1YXJlQ2xhc3MpO1xuXG4gIHNxdWFyZS5zdHlsZS5oZWlnaHQgPSBgJHtjZWxsU2l6ZX1weGA7XG4gIHNxdWFyZS5zdHlsZS53aWR0aCA9IGAke2NlbGxTaXplfXB4YDtcbiAgc3F1YXJlLnN0eWxlLm1heFdpZHRoID0gYCR7Y2VsbFNpemV9cHhgO1xuICBzcXVhcmUuc3R5bGUuZmxleCA9IGAwIDAgJHtjZWxsU2l6ZX1weGA7XG5cbiAgcmV0dXJuIHNxdWFyZTtcbn07XG5cbmxldCBjcmVhdGVTcXVhcmVDb250ZW50ID0gKGlkKSA9PiB7XG4gIGxldCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRlbnQuaWQgPSBpZDtcbiAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY29udGVudENsYXNzKTtcblxuICByZXR1cm4gY29udGVudDtcbn07XG5cbmxldCB0b0xvd2VyQ2FzZSA9IChzcXVhcmVzKSA9PiB7XG4gIGxldCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gIGZvciAobGV0IFtzLCBkXSBvZiBzcXVhcmVzKSB7XG4gICAgcmVzdWx0LnNldChzLnRvTG93ZXJDYXNlKCksIG5ldyBTZXQoWy4uLmRdLm1hcChkMSA9PiBkMS50b0xvd2VyQ2FzZSgpKSkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZChpZD0nZ3JpZC1jb250YWluZXInKSB7XG4gIGxldCByb3dzID0gWy4uLmdldExvd2VyQ2FzZVJvd3MoKV07XG4gIGxldCBjb2xzID0gWy4uLmdldENvbHMoKV07XG5cbiAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gIGxldCBzcXVhcmVzID0gbmV3IE1hcCgpO1xuICBsZXQgY2VsbFNpemUgPSBlbGVtZW50Lm9mZnNldFdpZHRoID8gKGVsZW1lbnQub2Zmc2V0V2lkdGggLyBuKSAtIDMgOiA1MDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGxldCByb3cgPSBjcmVhdGVSb3coY2VsbFNpemUpO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgIGxldCBpZCA9IGAke3Jvd3NbaV19JHtjb2xzW2pdfWA7XG4gICAgICBsZXQgc3F1YXJlID0gY3JlYXRlU3F1YXJlKGNlbGxTaXplKTtcbiAgICAgIGxldCBjb250ZW50ID0gY3JlYXRlU3F1YXJlQ29udGVudChpZCk7XG5cbiAgICAgIHNxdWFyZS5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgIHJvdy5hcHBlbmRDaGlsZChzcXVhcmUpO1xuICAgICAgc3F1YXJlcy5zZXQoaWQsIGNvbnRlbnQpO1xuICAgIH1cblxuICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocm93KTtcbiAgfVxuXG4gIGxldCBzID0gZ2V0U3F1YXJlcygpO1xuICBsZXQgdSA9IGdldFVuaXRMaXN0KCk7XG4gIGxldCBwZWVySWRzID0gdG9Mb3dlckNhc2UoZ2V0UGVlcnMocywgZ2V0VW5pdHMocywgdSkpKTtcbiAgbGV0IHBlZXJzID0gbmV3IE1hcCgpO1xuXG4gIGZvciAobGV0IFtzLCBwXSBvZiBwZWVySWRzKSB7XG4gICAgcGVlcnMuc2V0KHMsIFsuLi5wXS5tYXAoeCA9PiBzcXVhcmVzLmdldCh4KSkpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwZWVyczogcGVlcnMsXG4gICAgc3F1YXJlczogc3F1YXJlc1xuICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N1ZG9rdS1ncmlkLWJ1aWxkZXIuanMiXSwic291cmNlUm9vdCI6IiJ9