!function(t){function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}var e={};r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},r.p="",r(r.s=1)}([function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(){return g}function a(){return m}function o(){return p}function u(){return s(g,p)}function l(){return[].concat(n(p)).map(function(t){return s(g,new Set(t))}).concat([].concat(n(g)).map(function(t){return s(new Set(t),p)})).concat(function(){var t=[];return[["A","B","C"],["D","E","F"],["G","H","I"]].forEach(function(r){[["1","2","3"],["4","5","6"],["7","8","9"]].forEach(function(e){t.push(s(new Set(r),new Set(e)))})}),t}())}function c(t,r){var e=new Map;return[].concat(n(t)).forEach(function(t){return e.set(t,r.filter(function(r){return r.has(t)}))}),e}function f(t,r){var e=new Map;return[].concat(n(t)).forEach(function(t){var i=r.get(t);e.set(t,new Set([].concat(n(new Set([].concat(n(i[0]),n(i[1]),n(i[2]))))).filter(function(r){return r!==t})))}),e}function s(t,r){var e=new Set,n=!0,i=!1,a=void 0;try{for(var o,u=t.values()[Symbol.iterator]();!(n=(o=u.next()).done);n=!0){var l=o.value,c=!0,f=!1,s=void 0;try{for(var h,v=(r.values()||r)[Symbol.iterator]();!(c=(h=v.next()).done);c=!0){var y=h.value;e.add(l+y)}}catch(t){f=!0,s=t}finally{try{!c&&v.return&&v.return()}finally{if(f)throw s}}}}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}function h(t,r){var e=!0,n=!1,i=void 0;try{for(var a,o=t[Symbol.iterator]();!(e=(a=o.next()).done);e=!0){var u=a.value,l=r(u);if(l)return l}}catch(t){n=!0,i=t}finally{try{!e&&o.return&&o.return()}finally{if(n)throw i}}return!1}function v(t){for(var r=[].concat(n(t)),e=r.length,i=void 0,a=void 0;0!==e;)a=Math.floor(Math.random()*e),e-=1,i=r[e],r[e]=r[a],r[a]=i;return r}function y(t){var r=!0,e=!1,n=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){if(!i.value)return!1}}catch(t){e=!0,n=t}finally{try{!r&&a.return&&a.return()}finally{if(e)throw n}}return!0}function d(t,r){return Math.floor(Math.random()*(r-t+1))+t}Object.defineProperty(r,"__esModule",{value:!0}),r.getRows=i,r.getLowerCaseRows=a,r.getCols=o,r.getSquares=u,r.getUnitList=l,r.getUnits=c,r.getPeers=f,r.cross=s,r.some=h,r.shuffle=v,r.all=y,r.getRandomInt=d;var g=new Set(["A","B","C","D","E","F","G","H","I"]),p=new Set(["1","2","3","4","5","6","7","8","9"]),m=new Set(["a","b","c","d","e","f","g","h","i"])},function(t,r,e){"use strict";e(2);var n=e(3);new(function(t){return t&&t.__esModule?t:{default:t}}(n).default)},function(t,r){},function(t,r,e){"use strict";function n(t){return t&&t.__esModule?t:{default:t}}function i(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function a(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(r,"__esModule",{value:!0});var o=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),u=function(){function t(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(r,e,n){return e&&t(r.prototype,e),n&&t(r,n),r}}(),l=e(4),c=n(l),f=e(5),s=n(f),h=function(){function t(){var r=this;a(this,t),this.game=c.default.getGame(),this.puzzle=this.game.puzzle,this.original=new Map(this.puzzle),this.solution=this.game.solution,this.grid=new s.default,this.grid.fillClues(this.puzzle),this.setKeyInputEvents(),this.setBtnInputEvents(),document.getElementById("reset").onclick=function(){return r.reset()},document.getElementById("erase").onclick=function(){return r.erase()}}return u(t,[{key:"reset",value:function(){this.puzzle=new Map(this.original),this.grid.fillClues(this.puzzle)}},{key:"erase",value:function(){this.grid.setSquareValue("",this.puzzle)}},{key:"setBtnInputEvents",value:function(){var r=this,e=this.grid;document.querySelectorAll(".number-btn").forEach(function(n){n.onclick=function(){e.setSquareValue(n.value,r.puzzle),r.solved()&&t.displayMessage()}})}},{key:"setKeyInputEvents",value:function(){var r=this,e=this.grid,n=this.grid.squares,i=!0,a=!1,u=void 0;try{for(var l,c=n[Symbol.iterator]();!(i=(l=c.next()).done);i=!0){var f=l.value,s=o(f,2),h=s[0],v=s[1];!function(t,r){r.onclick=function(){e.highlightSquare(r),e.highlightPeers(t)}}(h,v)}}catch(t){a=!0,u=t}finally{try{!i&&c.return&&c.return()}finally{if(a)throw u}}document.onkeydown=function(n){var i=n.key,a=n.keyCode;a>=49&&a<=57?(e.setSquareValue(i,r.puzzle),r.solved()&&t.displayMessage()):8===a&&e.setSquareValue("",r.puzzle)}}},{key:"solved",value:function(){var t=!0,r=!1,e=void 0;try{for(var n,a=this.solution[Symbol.iterator]();!(t=(n=a.next()).done);t=!0){var u=n.value,l=o(u,2),c=l[0],f=l[1];if([].concat(i(this.puzzle.get(c)))[0]!==[].concat(i(f))[0])return!1}}catch(t){r=!0,e=t}finally{try{!t&&a.return&&a.return()}finally{if(r)throw e}}return!0}}],[{key:"displayMessage",value:function(){window.alert("Congratulations! You solved the puzzle.")}}]),t}();r.default=h},function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(t){var r=new Map;w.forEach(function(t){return r.set(t,m)});var e=!0,n=!1,i=void 0;try{for(var u,l=a(t).entries()[Symbol.iterator]();!(e=(u=l.next()).done);e=!0){var c=u.value,f=d(c,2),s=f[0],h=f[1];if(m.has(h)&&!o(r,s,h))return!1}}catch(t){n=!0,i=t}finally{try{!e&&l.return&&l.return()}finally{if(n)throw i}}return r}function a(t){for(var r=t.filter(function(t){return m.has(t)||"0"===t||"."===t}),e=new Map,i=[].concat(n(w)),a=0;a<i.length;a++)e.set(i[a],r[a]);return e}function o(t,r,e){var i=[].concat(n(t.get(r))).filter(function(t){return t!==e});return!!(0,g.all)(i.map(function(e){return u(t,r,e)}))&&t}function u(t,r,e){if(!t.get(r).has(e))return t;if(t.set(r,new Set([].concat(n(t.get(r))).filter(function(t){return t!==e}))),!t.get(r).size)return!1;if(1===t.get(r).size){var i=[].concat(n(t.get(r)))[0];if(!(0,g.all)([].concat(n(z.get(r))).map(function(r){return u(t,r,i)})))return!1}var a=!0,l=!1,c=void 0;try{for(var f,s=S.get(r)[Symbol.iterator]();!(a=(f=s.next()).done);a=!0){var h=f.value,v=[].concat(n(h)).filter(function(r){return t.get(r).has(e)});if(!v.length)return!1;if(1===v.length&&!o(t,v[0],e))return!1}}catch(t){l=!0,c=t}finally{try{!a&&s.return&&s.return()}finally{if(l)throw c}}return t}function l(t){return c(i(t))}function c(t){if(!t)return!1;if((0,g.all)([].concat(n(w)).map(function(r){return 1===t.get(r).size})))return t;var r=[].concat(n(w)).filter(function(r){return t.get(r).size>1}).sort(function(r,e){return t.get(r).size-t.get(e).size})[0];return(0,g.some)(t.get(r),function(e){return c(o(new Map(t),r,e))})}function f(t){function r(r){var e=!0,i=!1,a=void 0;try{for(var o,u=r[Symbol.iterator]();!(e=(o=u.next()).done);e=!0){var l=o.value;if([].concat(n(t.get(l))).filter(function(t){return!m.has(t)}).length>0)return!1}}catch(t){i=!0,a=t}finally{try{!e&&u.return&&u.return()}finally{if(i)throw a}}return!0}return t&&(0,g.all)(b.map(function(t){return r(t)}))}function s(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:17,r=new Map;w.forEach(function(t){return r.set(t,m)});var e=!0,i=!1,a=void 0;try{for(var u,l=(0,g.shuffle)(w)[Symbol.iterator]();!(e=(u=l.next()).done);e=!0){var c=u.value;if(!o(r,c,h(r.get(c))))break;var f=[].concat(n(w)).filter(function(t){return 1===r.get(t).size}).map(function(t){return r.get(t)});if(f.length>=t&&new Set(f).size>=8)return[].concat(n(w)).map(function(t){return 1===r.get(t).size?[].concat(n(r.get(t)))[0]:"0"})}}catch(t){i=!0,a=t}finally{try{!e&&l.return&&l.return()}finally{if(i)throw a}}return s(t)}function h(t){return[].concat(n(t))[(0,g.getRandomInt)(0,t.size-1)]}function v(t,r){var e=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(e=(o=u.next()).done);e=!0){var l=o.value,c=d(l,2),f=c[0],s=c[1];if([].concat(n(r.get(f)))[0]!==[].concat(n(s))[0])return!1}}catch(t){i=!0,a=t}finally{try{!e&&u.return&&u.return()}finally{if(i)throw a}}return!0}function y(t){var r=[],e={},i=(0,g.shuffle)(w);[].concat(n(w)).forEach(function(i,a){r.push([].concat(n(t.get(i)))[0]),e[i]=a});for(var a=new Map,o=0;o<i.length;o++){var u=e[i[o]],c=r[u];r[u]="0",v(t,l(r))?a.set(i[o],"0"):(r[u]=c,a.set(i[o],c))}return a}Object.defineProperty(r,"__esModule",{value:!0});var d=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),g=e(0),p={easy:28,medium:37,hard:45,master:65},m=(0,g.getCols)(),w=(0,g.getSquares)(),b=(0,g.getUnitList)(),S=(0,g.getUnits)(w,b),z=(0,g.getPeers)(w,S);r.default={getGame:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:p.easy,r=l(s(81-t));!f(r);)r=l(s());return{puzzle:y(r),solution:r}}}},function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(r,"__esModule",{value:!0});var a=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),o=function(){function t(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(r,e,n){return e&&t(r.prototype,e),n&&t(r,n),r}}(),u=e(6),l=function(){function t(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"grid-container";i(this,t),this.grid=(0,u.build)(r),this.peers=this.grid.peers,this.squares=this.grid.squares}return o(t,[{key:"fillClues",value:function(t){var r=!0,e=!1,i=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done);r=!0){var l=o.value,c=a(l,2),f=c[0],s=c[1],h=[].concat(n(s))[0],v=this.squares.get(f.toLowerCase());"0"===h||"."===h?v.innerHTML="":(v.classList.add("clue"),v.innerHTML=h)}}catch(t){e=!0,i=t}finally{try{!r&&u.return&&u.return()}finally{if(e)throw i}}}},{key:"setSquareValue",value:function(t,r){this.highlightedSquare&&(r.set(this.highlightedSquare.id.toUpperCase(),new Set(t)),this.highlightedSquare.innerHTML=t)}},{key:"highlightSquare",value:function(t){t.classList.contains("clue")||(this.highlightedSquare&&(this.highlightedSquare.classList.remove("focused-content"),this.highlightedSquare.classList.remove("highlight")),this.highlightedSquare=t,this.highlightedSquare.classList.add("focused-content"))}},{key:"highlightPeers",value:function(t){this.squares.get(t).classList.contains("clue")||(this.highlightedPeers&&this.highlightedPeers.forEach(function(r){r.id!==t&&r.classList.remove("highlight")}),this.highlightedPeers=this.peers.get(t),this.highlightedPeers.forEach(function(t){return t.classList.add("highlight")}))}}]),t}();r.default=l},function(t,r,e){"use strict";function n(t){if(Array.isArray(t)){for(var r=0,e=Array(t.length);r<t.length;r++)e[r]=t[r];return e}return Array.from(t)}function i(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"grid-container",r=[].concat(n((0,o.getLowerCaseRows)())),e=[].concat(n((0,o.getCols)())),i=document.getElementById(t),h=new Map,v=i.offsetWidth?i.offsetWidth/u-3:50,y=0;y<u;y++){for(var d=l(v),g=0;g<u;g++){var p=""+r[y]+e[g],m=c(v),w=f(p);m.appendChild(w),d.appendChild(m),h.set(p,w)}i.appendChild(d)}var b=(0,o.getSquares)(),S=(0,o.getUnitList)(),z=s((0,o.getPeers)(b,(0,o.getUnits)(b,S))),A=new Map,x=!0,M=!1,E=void 0;try{for(var q,C=z[Symbol.iterator]();!(x=(q=C.next()).done);x=!0){var k=q.value,L=a(k,2),P=L[0],_=L[1];A.set(P,[].concat(n(_)).map(function(t){return h.get(t)}))}}catch(t){M=!0,E=t}finally{try{!x&&C.return&&C.return()}finally{if(M)throw E}}return{peers:A,squares:h}}Object.defineProperty(r,"__esModule",{value:!0});var a=function(){function t(t,r){var e=[],n=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(n=(o=u.next()).done)&&(e.push(o.value),!r||e.length!==r);n=!0);}catch(t){i=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(i)throw a}}return e}return function(r,e){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();r.build=i;var o=e(0),u=9,l=function(t){var r=document.createElement("div");return r.setAttribute("class","row"),r.style.height=t+"px",r},c=function(t){var r=document.createElement("div");return r.setAttribute("class","col-1 square"),r.style.height=t+"px",r.style.width=t+"px",r.style.maxWidth=t+"px",r.style.flex="0 0 "+t+"px",r},f=function(t){var r=document.createElement("div");return r.id=t,r.setAttribute("class","square-content"),r},s=function(t){var r=new Map,e=!0,i=!1,o=void 0;try{for(var u,l=t[Symbol.iterator]();!(e=(u=l.next()).done);e=!0){var c=u.value,f=a(c,2),s=f[0],h=f[1];r.set(s.toLowerCase(),new Set([].concat(n(h)).map(function(t){return t.toLowerCase()})))}}catch(t){i=!0,o=t}finally{try{!e&&l.return&&l.return()}finally{if(i)throw o}}return r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,