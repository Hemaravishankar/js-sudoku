!function(t){var r={};function e(n){if(r[n])return r[n].exports;var i=r[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,r){if(1&r&&(t=e(t)),8&r)return t;if(4&r&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&r&&"string"!=typeof t)for(var i in t)e.d(n,i,function(r){return t[r]}.bind(null,i));return n},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=1)}([function(t,r,e){},function(t,r,e){"use strict";e.r(r);e(0);function n(t){return function(t){if(Array.isArray(t)){for(var r=0,e=new Array(t.length);r<t.length;r++)e[r]=t[r];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i=new Set(["A","B","C","D","E","F","G","H","I"]),o=new Set(["1","2","3","4","5","6","7","8","9"]),a=new Set(["a","b","c","d","e","f","g","h","i"]);function u(){return o}function l(){return h(i,o)}function f(){return n(o).map(function(t){return h(i,new Set(t))}).concat(n(i).map(function(t){return h(new Set(t),o)})).concat((t=[],[["A","B","C"],["D","E","F"],["G","H","I"]].forEach(function(r){[["1","2","3"],["4","5","6"],["7","8","9"]].forEach(function(e){t.push(h(new Set(r),new Set(e)))})}),t));var t}function c(t,r){var e=new Map;return n(t).forEach(function(t){return e.set(t,r.filter(function(r){return r.has(t)}))}),e}function s(t,r){var e=new Map;return n(t).forEach(function(t){var i=r.get(t);e.set(t,new Set(n(new Set([].concat(n(i[0]),n(i[1]),n(i[2])))).filter(function(r){return r!==t})))}),e}function h(t,r){var e=new Set,n=!0,i=!1,o=void 0;try{for(var a,u=t.values()[Symbol.iterator]();!(n=(a=u.next()).done);n=!0){var l=a.value,f=!0,c=!1,s=void 0;try{for(var h,y=(r.values()||r)[Symbol.iterator]();!(f=(h=y.next()).done);f=!0){var v=h.value;e.add(l+v)}}catch(t){c=!0,s=t}finally{try{f||null==y.return||y.return()}finally{if(c)throw s}}}}catch(t){i=!0,o=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return e}function y(t){for(var r,e,i=n(t),o=i.length;0!==o;)e=Math.floor(Math.random()*o),r=i[o-=1],i[o]=i[e],i[e]=r;return i}function v(t){var r=!0,e=!1,n=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done);r=!0){if(!i.value)return!1}}catch(t){e=!0,n=t}finally{try{r||null==o.return||o.return()}finally{if(e)throw n}}return!0}function d(t){return function(t){if(Array.isArray(t)){for(var r=0,e=new Array(t.length);r<t.length;r++)e[r]=t[r];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function g(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=[],n=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(n=(a=u.next()).done)&&(e.push(a.value),!r||e.length!==r);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var p=28,m=u(),w=l(),b=f(),S=c(w,b),A=s(w,S);function z(t){var r=new Map;w.forEach(function(t){return r.set(t,m)});var e=!0,n=!1,i=void 0;try{for(var o,a=function(t){for(var r=t.filter(function(t){return m.has(t)||"0"===t||"."===t}),e=new Map,n=d(w),i=0;i<n.length;i++)e.set(n[i],r[i]);return e}(t).entries()[Symbol.iterator]();!(e=(o=a.next()).done);e=!0){var u=g(o.value,2),l=u[0],f=u[1];if(m.has(f)&&!E(r,l,f))return!1}}catch(t){n=!0,i=t}finally{try{e||null==a.return||a.return()}finally{if(n)throw i}}return r}function E(t,r,e){return!!v(d(t.get(r)).filter(function(t){return t!==e}).map(function(e){return function t(r,e,n){if(!r.get(e).has(n))return r;r.set(e,new Set(d(r.get(e)).filter(function(t){return t!==n})));if(!r.get(e).size)return!1;if(1===r.get(e).size){var i=d(r.get(e))[0];if(!v(d(A.get(e)).map(function(e){return t(r,e,i)})))return!1}var o=!0;var a=!1;var u=void 0;try{for(var l,f=S.get(e)[Symbol.iterator]();!(o=(l=f.next()).done);o=!0){var c=l.value,s=d(c).filter(function(t){return r.get(t).has(n)});if(!s.length)return!1;if(1===s.length&&!E(r,s[0],n))return!1}}catch(t){a=!0,u=t}finally{try{o||null==f.return||f.return()}finally{if(a)throw u}}return r}(t,r,e)}))&&t}function x(t){return function t(r){if(!r)return!1;if(v(d(w).map(function(t){return 1===r.get(t).size})))return r;var e=d(w).filter(function(t){return r.get(t).size>1}).sort(function(t,e){return r.get(t).size-r.get(e).size})[0];return function(t,r){var e=!0,n=!1,i=void 0;try{for(var o,a=t[Symbol.iterator]();!(e=(o=a.next()).done);e=!0){var u=r(o.value);if(u)return u}}catch(t){n=!0,i=t}finally{try{e||null==a.return||a.return()}finally{if(n)throw i}}return!1}(r.get(e),function(n){return t(E(new Map(r),e,n))})}(z(t))}function M(t){return t&&v(b.map(function(r){return function(r){var e=!0,n=!1,i=void 0;try{for(var o,a=r[Symbol.iterator]();!(e=(o=a.next()).done);e=!0){var u=o.value;if(d(t.get(u)).filter(function(t){return!m.has(t)}).length>0)return!1}}catch(t){n=!0,i=t}finally{try{e||null==a.return||a.return()}finally{if(n)throw i}}return!0}(r)}))}function j(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:17,r=new Map;w.forEach(function(t){return r.set(t,m)});var e=!0,n=!1,i=void 0;try{for(var o,a=y(w)[Symbol.iterator]();!(e=(o=a.next()).done);e=!0){var u=o.value;if(!E(r,u,q(r.get(u))))break;var l=d(w).filter(function(t){return 1===r.get(t).size}).map(function(t){return r.get(t)});if(l.length>=t&&new Set(l).size>=8)return d(w).map(function(t){return 1===r.get(t).size?d(r.get(t))[0]:"0"})}}catch(t){n=!0,i=t}finally{try{e||null==a.return||a.return()}finally{if(n)throw i}}return j(t)}function q(t){return d(t)[(r=0,e=t.size-1,Math.floor(Math.random()*(e-r+1))+r)];var r,e}function k(t,r){var e=!0,n=!1,i=void 0;try{for(var o,a=t[Symbol.iterator]();!(e=(o=a.next()).done);e=!0){var u=g(o.value,2),l=u[0],f=u[1];if(d(r.get(l))[0]!==d(f)[0])return!1}}catch(t){n=!0,i=t}finally{try{e||null==a.return||a.return()}finally{if(n)throw i}}return!0}function O(t){var r=[],e={},n=y(w);d(w).forEach(function(n,i){r.push(d(t.get(n))[0]),e[n]=i});for(var i=new Map,o=0;o<n.length;o++){var a=e[n[o]],u=r[a];r[a]="0",k(t,x(r))?i.set(n[o],"0"):(r[a]=u,i.set(n[o],u))}return i}var I={getGame:function(){for(var t=x(j(81-(arguments.length>0&&void 0!==arguments[0]?arguments[0]:p)));!M(t);)t=x(j());return{puzzle:O(t),solution:t}}};function C(t){return function(t){if(Array.isArray(t)){for(var r=0,e=new Array(t.length);r<t.length;r++)e[r]=t[r];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function T(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=[],n=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(n=(a=u.next()).done)&&(e.push(a.value),!r||e.length!==r);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var L=9,P=function(t){var r=document.createElement("div");return r.setAttribute("class","row"),r.style.height="".concat(t,"px"),r},B=function(t){var r=document.createElement("div");return r.setAttribute("class","col-1 square"),r.style.height="".concat(t,"px"),r.style.width="".concat(t,"px"),r.style.maxWidth="".concat(t,"px"),r.style.flex="0 0 ".concat(t,"px"),r},_=function(t){var r=document.createElement("div");return r.id=t,r.setAttribute("class","square-content"),r},H=function(t){var r=new Map,e=!0,n=!1,i=void 0;try{for(var o,a=t[Symbol.iterator]();!(e=(o=a.next()).done);e=!0){var u=T(o.value,2),l=u[0],f=u[1];r.set(l.toLowerCase(),new Set(C(f).map(function(t){return t.toLowerCase()})))}}catch(t){n=!0,i=t}finally{try{e||null==a.return||a.return()}finally{if(n)throw i}}return r};function V(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"grid-container",r=C(a),e=C(u()),n=document.getElementById(t),i=new Map,o=n.offsetWidth?n.offsetWidth/L-3:50,h=0;h<L;h++){for(var y=P(o),v=0;v<L;v++){var d="".concat(r[h]).concat(e[v]),g=B(o),p=_(d);g.appendChild(p),y.appendChild(g),i.set(d,p)}n.appendChild(y)}var m=l(),w=f(),b=H(s(m,c(m,w))),S=new Map,A=!0,z=!1,E=void 0;try{for(var x,M=b[Symbol.iterator]();!(A=(x=M.next()).done);A=!0){var j=T(x.value,2),q=j[0],k=j[1];S.set(q,C(k).map(function(t){return i.get(t)}))}}catch(t){z=!0,E=t}finally{try{A||null==M.return||M.return()}finally{if(z)throw E}}return{peers:S,squares:i}}function G(t){return function(t){if(Array.isArray(t)){for(var r=0,e=new Array(t.length);r<t.length;r++)e[r]=t[r];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function W(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=[],n=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(n=(a=u.next()).done)&&(e.push(a.value),!r||e.length!==r);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function D(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var F=function(){function t(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"grid-container";!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.grid=V(r),this.peers=this.grid.peers,this.squares=this.grid.squares}var r,e,n;return r=t,(e=[{key:"fillClues",value:function(t){var r=!0,e=!1,n=void 0;try{for(var i,o=t[Symbol.iterator]();!(r=(i=o.next()).done);r=!0){var a=W(i.value,2),u=a[0],l=G(a[1])[0],f=this.squares.get(u.toLowerCase());"0"===l||"."===l?f.innerHTML="":(f.classList.add("clue"),f.innerHTML=l)}}catch(t){e=!0,n=t}finally{try{r||null==o.return||o.return()}finally{if(e)throw n}}}},{key:"setSquareValue",value:function(t,r){this.highlightedSquare&&(r.set(this.highlightedSquare.id.toUpperCase(),new Set(t)),this.highlightedSquare.innerHTML=t)}},{key:"highlightSquare",value:function(t){t.classList.contains("clue")||(this.highlightedSquare&&(this.highlightedSquare.classList.remove("focused-content"),this.highlightedSquare.classList.remove("highlight")),this.highlightedSquare=t,this.highlightedSquare.classList.add("focused-content"))}},{key:"highlightPeers",value:function(t){this.squares.get(t).classList.contains("clue")||(this.highlightedPeers&&this.highlightedPeers.forEach(function(r){r.id!==t&&r.classList.remove("highlight")}),this.highlightedPeers=this.peers.get(t),this.highlightedPeers.forEach(function(t){return t.classList.add("highlight")}))}}])&&D(r.prototype,e),n&&D(r,n),t}();function K(t){return function(t){if(Array.isArray(t)){for(var r=0,e=new Array(t.length);r<t.length;r++)e[r]=t[r];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function U(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=[],n=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(n=(a=u.next()).done)&&(e.push(a.value),!r||e.length!==r);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Y(t,r){for(var e=0;e<r.length;e++){var n=r[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}new(function(){function t(){var r=this;!function(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this.game=I.getGame(),this.puzzle=this.game.puzzle,this.original=new Map(this.puzzle),this.solution=this.game.solution,this.grid=new F,this.grid.fillClues(this.puzzle),this.setKeyInputEvents(),this.setBtnInputEvents(),document.getElementById("reset").onclick=function(){return r.reset()},document.getElementById("erase").onclick=function(){return r.erase()}}var r,e,n;return r=t,n=[{key:"displayMessage",value:function(){window.alert("Congratulations! You solved the puzzle.")}}],(e=[{key:"reset",value:function(){this.puzzle=new Map(this.original),this.grid.fillClues(this.puzzle)}},{key:"erase",value:function(){this.grid.setSquareValue("",this.puzzle)}},{key:"setBtnInputEvents",value:function(){var r=this,e=this.grid;document.querySelectorAll(".number-btn").forEach(function(n){n.onclick=function(){e.setSquareValue(n.value,r.puzzle),r.solved()&&t.displayMessage()}})}},{key:"setKeyInputEvents",value:function(){var r=this,e=this.grid,n=this.grid.squares,i=!0,o=!1,a=void 0;try{for(var u,l=function(){var t=U(u.value,2),r=t[0],n=t[1];n.onclick=function(){e.highlightSquare(n),e.highlightPeers(r)}},f=n[Symbol.iterator]();!(i=(u=f.next()).done);i=!0)l()}catch(t){o=!0,a=t}finally{try{i||null==f.return||f.return()}finally{if(o)throw a}}document.onkeydown=function(n){var i=n.key,o=n.keyCode;o>=49&&o<=57?(e.setSquareValue(i,r.puzzle),r.solved()&&t.displayMessage()):8===o&&e.setSquareValue("",r.puzzle)}}},{key:"solved",value:function(){var t=!0,r=!1,e=void 0;try{for(var n,i=this.solution[Symbol.iterator]();!(t=(n=i.next()).done);t=!0){var o=U(n.value,2),a=o[0],u=o[1];if(K(this.puzzle.get(a))[0]!==K(u)[0])return!1}}catch(t){r=!0,e=t}finally{try{t||null==i.return||i.return()}finally{if(r)throw e}}return!0}}])&&Y(r.prototype,e),n&&Y(r,n),t}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,