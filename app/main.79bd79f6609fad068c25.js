!function(t){function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}var n={};r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:e})},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},r.p="",r(r.s=0)}([function(t,r,n){"use strict";function e(t){if(Array.isArray(t)){for(var r=0,n=Array(t.length);r<t.length;r++)n[r]=t[r];return n}return Array.from(t)}var o=function(){function t(t,r){var n=[],e=!0,o=!1,a=void 0;try{for(var i,u=t[Symbol.iterator]();!(e=(i=u.next()).done)&&(n.push(i.value),!r||n.length!==r);e=!0);}catch(t){o=!0,a=t}finally{try{!e&&u.return&&u.return()}finally{if(o)throw a}}return n}return function(r,n){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),a=n(1),i=function(t){return t&&t.__esModule?t:{default:t}}(a);n(2);var u=i.default.getPuzzle(),c=i.default.peers,f=function(t){var r=document.getElementById("grid-container"),n=["a","b","c","d","e","f","g","h","i"],a=[1,2,3,4,5,6,7,8,9].map(function(t){return t.toString()}),i=new Map,u=new Map,c=new Map,f=void 0,l=void 0,v=!0,y=!1,s=void 0;try{for(var d,h=t[Symbol.iterator]();!(v=(d=h.next()).done);v=!0){var g=d.value,p=o(g,2),w=p[0],m=p[1];i.set(w.toLowerCase(),new Set([].concat(e(m)).map(function(t){return t.toLowerCase()})))}}catch(t){y=!0,s=t}finally{try{!v&&h.return&&h.return()}finally{if(y)throw s}}for(var b=r.offsetWidth/9-3,S=function(t){l&&l.forEach(function(r){r.id!==t&&r.setAttribute("class","square-content")}),l=c.get(t),l.forEach(function(t){return t.setAttribute("class","square-content highlight")})},x=function(t){f&&f.setAttribute("class","square-content"),f=t.target,f.setAttribute("class","square-content focused-content"),S(t.target.id)},A=function(t){x(t)},M=function(t){t.keyCode>=49&&t.keyCode<=57?f&&(f.innerHTML=t.key):8===t.keyCode&&f&&(f.innerHTML="")},z=0;z<9;z++){var E=document.createElement("div");E.setAttribute("class","row"),E.style.height=b+"px";for(var C=0;C<9;C++){var k=""+n[z]+a[C],q=document.createElement("div");q.id=k,q.setAttribute("class","col-1 square"),q.style.height=b+"px",q.style.width=b+"px",q.style.maxWidth=b+"px",q.style.flex="0 0 "+b+"px";var L=document.createElement("div");L.id=k,L.setAttribute("class","square-content"),L.onclick=A,document.onkeydown=M,q.appendChild(L),E.appendChild(q),u.set(k,L)}r.appendChild(E)}var O=!0,_=!1,j=void 0;try{for(var H,I=i[Symbol.iterator]();!(O=(H=I.next()).done);O=!0){var P=H.value,T=o(P,2),B=T[0],D=T[1];c.set(B,[].concat(e(D)).map(function(t){return u.get(t)}))}}catch(t){_=!0,j=t}finally{try{!O&&I.return&&I.return()}finally{if(_)throw j}}return u}(c),l=!0,v=!1,y=void 0;try{for(var s,d=u.puzzle[Symbol.iterator]();!(l=(s=d.next()).done);l=!0){var h=s.value,g=o(h,2),p=g[0],w=g[1];f.get(p.toLowerCase()).innerHTML="0"===[].concat(e(w))[0]?"":[].concat(e(w))[0]}}catch(t){v=!0,y=t}finally{try{!l&&d.return&&d.return()}finally{if(v)throw y}}},function(t,r,n){"use strict";function e(t){if(Array.isArray(t)){for(var r=0,n=Array(t.length);r<t.length;r++)n[r]=t[r];return n}return Array.from(t)}function o(t,r){var n=new Set,e=!0,o=!1,a=void 0;try{for(var i,u=t.values()[Symbol.iterator]();!(e=(i=u.next()).done);e=!0){var c=i.value,f=!0,l=!1,v=void 0;try{for(var y,s=(r.values()||r)[Symbol.iterator]();!(f=(y=s.next()).done);f=!0){var d=y.value;n.add(c+d)}}catch(t){l=!0,v=t}finally{try{!f&&s.return&&s.return()}finally{if(l)throw v}}}}catch(t){o=!0,a=t}finally{try{!e&&u.return&&u.return()}finally{if(o)throw a}}return n}function a(t){var r=new Map;M.forEach(function(t){return r.set(t,x)});var n=!0,e=!1,o=void 0;try{for(var a,c=i(t).entries()[Symbol.iterator]();!(n=(a=c.next()).done);n=!0){var f=a.value,l=b(f,2),v=l[0],y=l[1];if(x.has(y)&&!u(r,v,y))return!1}}catch(t){e=!0,o=t}finally{try{!n&&c.return&&c.return()}finally{if(e)throw o}}return r}function i(t){var r=t.filter(function(t){return x.has(t)||"0"===t||"."===t}),n=new Map,o=[].concat(e(M));console.assert(81===r.length);for(var a=0;a<o.length;a++)n.set(o[a],r[a]);return n}function u(t,r,n){return!!s([].concat(e(t.get(r))).filter(function(t){return t!==n}).map(function(n){return c(t,r,n)}))&&t}function c(t,r,n){if(!t.get(r).has(n))return t;if(t.set(r,new Set([].concat(e(t.get(r))).filter(function(t){return t!==n}))),!t.get(r).size)return!1;if(1===t.get(r).size){var o=[].concat(e(t.get(r)))[0];if(!s([].concat(e(k.get(r))).map(function(r){return c(t,r,o)})))return!1}var a=!0,i=!1,f=void 0;try{for(var l,v=C.get(r)[Symbol.iterator]();!(a=(l=v.next()).done);a=!0){var y=l.value,d=[].concat(e(y)).filter(function(r){return t.get(r).has(n)});if(!d.length)return!1;if(1===d.length&&!u(t,d[0],n))return!1}}catch(t){i=!0,f=t}finally{try{!a&&v.return&&v.return()}finally{if(i)throw f}}return t}function f(t){return l(a(t))}function l(t){if(!t)return!1;if(s([].concat(e(M)).map(function(r){return 1===t.get(r).size})))return t;var r=[].concat(e(M)).filter(function(r){return t.get(r).size>1}).sort(function(r,n){return t.get(r).size-t.get(n).size})[0];return v(t.get(r),function(n){return l(u(new Map(t),r,n))})}function v(t,r){var n=!0,e=!1,o=void 0;try{for(var a,i=t[Symbol.iterator]();!(n=(a=i.next()).done);n=!0){var u=a.value,c=r(u);if(c)return c}}catch(t){e=!0,o=t}finally{try{!n&&i.return&&i.return()}finally{if(e)throw o}}return!1}function y(t){for(var r=[].concat(e(t)),n=r.length,o=void 0,a=void 0;0!==n;)a=Math.floor(Math.random()*n),n-=1,o=r[n],r[n]=r[a],r[a]=o;return r}function s(t){var r=!0,n=!1,e=void 0;try{for(var o,a=t[Symbol.iterator]();!(r=(o=a.next()).done);r=!0){if(!o.value)return!1}}catch(t){n=!0,e=t}finally{try{!r&&a.return&&a.return()}finally{if(n)throw e}}return!0}function d(t){function r(r){var n=!0,o=!1,a=void 0;try{for(var i,u=r[Symbol.iterator]();!(n=(i=u.next()).done);n=!0){var c=i.value;if([].concat(e(t.get(c))).filter(function(t){return!x.has(t)}).length>0)return!1}}catch(t){o=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(o)throw a}}return!0}return t&&s(E.map(function(t){return r(t)}))}function h(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:17,r=new Map;M.forEach(function(t){return r.set(t,x)});var n=!0,o=!1,a=void 0;try{for(var i,c=y(M)[Symbol.iterator]();!(n=(i=c.next()).done);n=!0){var f=i.value;if(!u(r,f,g(r.get(f))))break;var l=[].concat(e(M)).filter(function(t){return 1===r.get(t).size}).map(function(t){return r.get(t)});if(l.length>=t&&new Set(l).size>=8)return[].concat(e(M)).map(function(t){return 1===r.get(t).size?[].concat(e(r.get(t)))[0]:"0"})}}catch(t){o=!0,a=t}finally{try{!n&&c.return&&c.return()}finally{if(o)throw a}}return h(t)}function g(t){return[].concat(e(t))[p(0,t.size-1)]}function p(t,r){return Math.floor(Math.random()*(r-t+1))+t}function w(t,r){var n=!0,o=!1,a=void 0;try{for(var i,u=t[Symbol.iterator]();!(n=(i=u.next()).done);n=!0){var c=i.value,f=b(c,2),l=f[0],v=f[1];if([].concat(e(r.get(l)))[0]!==[].concat(e(v))[0])return!1}}catch(t){o=!0,a=t}finally{try{!n&&u.return&&u.return()}finally{if(o)throw a}}return!0}function m(t){var r=[],n={},o=y(M),a=new Map,i=new Map;[].concat(e(M)).forEach(function(o,a){r.push([].concat(e(t.get(o)))[0]),n[o]=a});for(var u=0;u<o.length;u++){var c=n[o[u]],l=r[c];r[c]="0",w(t,f(r))?(a.set(o[u],"0"),i.set(o[u],l)):(r[c]=l,a.set(o[u],l))}return a}Object.defineProperty(r,"__esModule",{value:!0});var b=function(){function t(t,r){var n=[],e=!0,o=!1,a=void 0;try{for(var i,u=t[Symbol.iterator]();!(e=(i=u.next()).done)&&(n.push(i.value),!r||n.length!==r);e=!0);}catch(t){o=!0,a=t}finally{try{!e&&u.return&&u.return()}finally{if(o)throw a}}return n}return function(r,n){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return t(r,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),S=new Set(["A","B","C","D","E","F","G","H","I"]),x=new Set(["1","2","3","4","5","6","7","8","9"]),A=new Set(x),M=o(S,A),z={easy:28,medium:37,hard:45,master:65},E=[].concat(e(A)).map(function(t){return o(S,new Set(t))}).concat([].concat(e(S)).map(function(t){return o(new Set(t),A)})).concat(function(){for(var t=[["A","B","C"],["D","E","F"],["G","H","I"]],r=[["1","2","3"],["4","5","6"],["7","8","9"]],n=[],e=0;e<t.length;e++)for(var a=0;a<r.length;a++)n.push(o(new Set(t[e]),new Set(r[a])));return n}()),C=new Map,k=new Map,q=!0,L=!1,O=void 0;try{for(var _,j=M[Symbol.iterator]();!(q=(_=j.next()).done);q=!0){var H=_.value;!function(t){C.set(t,E.filter(function(r){return r.has(t)}));var r=C.get(t);k.set(t,new Set([].concat(e(new Set([].concat(e(r[0]),e(r[1]),e(r[2]))))).filter(function(r){return r!==t})))}(H)}}catch(t){L=!0,O=t}finally{try{!q&&j.return&&j.return()}finally{if(L)throw O}}r.default={getPuzzle:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:z.easy,r=f(h(81-t));!d(r);)r=f(h());return{solution:r,puzzle:m(r)}},peers:k}},function(t,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,